if (count2%%as.integer(totalCount/10)==0){
j <- j+1
print(paste(j*10, "percent was finished..."))}
# center <- i
# print(center)
result1 <- singleModuleDetection(corM=corM, overlapM=geneOverlap, center=center, centerBlackList=centerBlackList, topCount=100)
genelist <- result1[["genelist"]]
centerBlackList1 <- result1[["centerBlackList"]]
result2 <- moduleShift(corM, genelist, centerBlackList=centerBlackList1)
genelist <- result2[["genelist"]]
centerBlackList2 <- result2[["centerBlackList"]]
tempCenter <- centerDetection(corM, genelist)
if (tempCenter%in%centerBlackList) {
# print(paste(tempCenter, "is duplicated center!", sep=" "))
next}
centerBlackList <- c(centerBlackList, centerBlackList2)
# print(genelist)
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
return(moduleResult)
}
localCenterDetection <- function(corM=dis_matrix, disThresd=disThresd){
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 5,]
densityDf <- as.data.frame(densityDf)
densityDf$centrality <- apply(densityDf, 1, function(x) {return(sum(log(1+x) * (1-seq(0.05,disThresd,by=0.05))))})
densityDf <- densityDf[order(densityDf$centrality, decreasing=T),]
# how to merge the duplicated
# a <- data.frame(x=names(densityDf[1,]), y=as.integer(densityDf[1,]))
# a <- a[1:13,]
# a$x <- as.double(a$x)
# a$x <- 1-a$x
# a$y <- log2(1+a$y)
# plot(a, type="b", col="blue", xlab="1-k", ylab="log2(1+count(i))", main="Centrality of CLDN6")
# write.csv(densityDf, file = "densityDf.csv")
return(rownames(densityDf))
}
sortmoduleResult <- function(corM, moduleResult=moduleResult){
meanCor <- c()
for (i in 1:length(moduleResult)){
meanCor <- c(meanCor, mean(corM[moduleResult[[i]], moduleResult[[i]]]))
}
names(meanCor) <- 1:length(moduleResult)
meanCor <- sort(meanCor)
}
expr_log3 <- t(logcounts(tmp_group))
expr_log3 <- t(expr_matrix)
# overlap
# expr_log4 <- apply(expr_log3>=1,2,function(x) {storage.mode(x) <- 'integer'; x})
# geneOverlap <- t(expr_log4) %*% expr_log4
# use.gene <- rownames(geneOverlap)[apply(geneOverlap, 2, max) > 3]
expr_log3 <- expr_log3[,colSums(expr_log3>0)>3]
library(WGCNA)
# standard deviation can't be zero
# cor_matrix_pearson <- WGCNA::cor(x = as.matrix((expr_log3)), method = "pearson")
cor_matrix_spearman <- WGCNA::cor(x = as.matrix((expr_log3)), method = "spearman")
cor_matrix_spearman[cor_matrix_spearman<0] <- 0
dis_matrix <- 1 - abs(cor_matrix_spearman)
dis_matrix[is.na(dis_matrix)] <- 1
dis_matrix[row(dis_matrix)==col(dis_matrix)] <- 1
# dis_matrix <- dis_matrix[use.gene, use.gene]
minPerRow <- apply(dis_matrix, 2, min)
# consider how to evaluate this value
disThresd <- quantile(minPerRow, probs = seq(0, 1, 0.25))[2]
dim(dis_matrix)
length(minPerRow)
quantile(minPerRow, probs = seq(0, 1, 0.25))[2]
quantile(minPerRow, probs = seq(0, 1, 0.25))
sum(minPerRow>=0.65125326)
sum(minPerRow>=0.65125326)/12988
min(minPerRow)
max(minPerRow)
sum(minPerRow<=0.65125326)
quantile(minPerRow, probs = seq(0, 1, 0.2))
quantile(minPerRow, probs = seq(0, 1, 0.1))
disThresd <- quantile(minPerRow, probs = seq(0, 1, 0.1))[2]
disThresd
dis_matrix2 <- dis_matrix
dis_matrix <- dis_matrix[names(minPerRow[minPerRow < disThresd]),names(minPerRow[minPerRow < disThresd])]
dim(dis_matrix)
corM=dis_matrix
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 5,]
densityDf <- as.data.frame(densityDf)
densityDf$centrality <- apply(densityDf, 1, function(x) {return(sum(log(1+x) * (1-seq(0.05,disThresd,by=0.05))))})
densityDf <- densityDf[order(densityDf$centrality, decreasing=T),]
densityDf
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 5,]
densityDf <- as.data.frame(densityDf)
densityDf$centrality <- apply(densityDf, 1, function(x) {return(sum(log10(1+x) * (1-seq(0.05,disThresd,by=0.05))))})
densityDf <- densityDf[order(densityDf$centrality, decreasing=T),]
densityDf
log10(1)
log10(1+1)
log10(1+10)
localCenters=rownames(densityDf)
topGene=20
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
localCenters
dim(densityDf)
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 3,]
densityDf <- as.data.frame(densityDf)
densityDf$centrality <- apply(densityDf, 1, function(x) {return(sum(log10(1+x) * (1-seq(0.05,disThresd,by=0.05))))})
densityDf <- densityDf[order(densityDf$centrality, decreasing=T),]
dim(densityDf)
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
dim(densityDf)
densityDf <- densityDf[apply(densityDf, 1, max) > 2,]
dim(densityDf)
densityDf <- densityDf[apply(densityDf, 1, max) > 1,]
dim(densityDf)
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 1,]
dim(densityDf)
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
dim(densityDf)
View(densityDf)
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 0,]
View(densityDf)
dim(densityDf)
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 2,]
densityDf <- as.data.frame(densityDf)
densityDf$centrality <- apply(densityDf, 1, function(x) {return(sum(log10(1+x) * (1-seq(0.05,disThresd,by=0.05))))})
densityDf <- densityDf[order(densityDf$centrality, decreasing=T),]
dim(densityDf)
localCenters=rownames(densityDf)
cutThresd=disThresd
cutThresd
dim(dis_matrix)
sum(dis_matrix>disThresd)
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
localCenters
center <- localCenters[1]
center
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=10)
genelist
genelist
centerBlackList
centerBlackList <- unique(c(centerBlackList, genelist))
centerBlackList
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
moduleResult
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=10)
# if (length(intersect(genelist, centerBlackList)) > 0) {
#   moduleResultbak[[count2]] <- genelist
#   count2 <- count2 + 1
#   next
# }
centerBlackList <- unique(c(centerBlackList, genelist))
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
moduleResult
View(densityDf)
seq(0.05,disThresd,by=0.05)
max(seq(0.05,disThresd,by=0.05))
max(seq(0.05,disThresd,by=0.05)) - seq(0.05,disThresd,by=0.05)
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 2,]
densityDf <- as.data.frame(densityDf)
densityDf$centrality <- apply(densityDf, 1, function(x) {return(sum(log10(1+x) * (max(seq(0.05,disThresd,by=0.05))-seq(0.05,disThresd,by=0.05))))})
densityDf <- densityDf[order(densityDf$centrality, decreasing=T),]
disThresd=disThresd
disThresd
dim(dis_matrix)
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 2,]
densityDf <- as.data.frame(densityDf)
densityDf$centrality <- apply(densityDf, 1, function(x) {return(sum(log10(1+x) * (max(seq(0.05,disThresd,by=0.05))-seq(0.05,disThresd,by=0.05))))})
densityDf <- densityDf[order(densityDf$centrality, decreasing=T),]
dim(densityDf)
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 2,]
densityDf <- as.data.frame(densityDf)
densityDf$centrality <- apply(densityDf, 1, function(x) {return(sum(log10(1+x) * (max(seq(0.05,disThresd+0.05,by=0.05))-seq(0.05,disThresd,by=0.05))))})
densityDf <- densityDf[order(densityDf$centrality, decreasing=T),]
a <- c("SEMA3D","SMAGP","KRT7","CLDN4","CLDN7","CDH1","EFNA1","ACSM3","WNT6")
b <- c("PTPRZ1","MOXD1","SCRG1","EDNRB","INSC","SPP1","PLP1")
c <- c("MSX1","NELL2","PLCH1","MMRN1","TRPM3","WNT2B","COLEC12","LIX1","ZIC1","RBFOX1","OTX1","TMEM88","ZIC2")
d <- c("ISL1","NEUROD1","EYA2","SCG3","SIX1","SYT4","EBF1","NHLH1","ZMAT4","STMN2","ENO3","TAGLN3")
e <- c("FAP","PRRX1","TGFBI","TWIST1","LUM","CDH11")
densityDf[a,]
densityDf[b,]
densityDf[c,]
densityDf[d,]
densityDf[e\,]
densityDf[e,]
densityDf
dim(expr_log3)
exprM2 <- apply(exprM[,rownames(densityDf)]>=1,2,function(x) {storage.mode(x) <- 'integer'; x})
exprM=expr_log3
exprM2 <- apply(exprM[,rownames(densityDf)]>=1,2,function(x) {storage.mode(x) <- 'integer'; x})
exprM2
dim(exprM2)
geneOverlap <- t(exprM2) %*% exprM2
geneOverlap
geneOverlap[1:5,1:5]
corM["CLDN6", "CLDN7"]
corM[c("CLDN6", "CLDN7"),]
corM[c("CLDN6", "CLDN7"),1:10]
corM[c("CLDN6", "CLDN7"),1:10] < 0.5
colSums(corM[c("CLDN6", "CLDN7"),1:10] < 0.5)
geneA <- "CLDN6"
geneB <- "CLDN7"
overlapPercent <- colSums(corM[c(geneA, geneB),] < 0.5)
overlapPercent
table(overlapPercent)
overlapPercentRaw <- table(colSums(corM[c(geneA, geneB),] < 0.5))
overlapPercentRaw
overlapPercentRaw["1"]
overlapPercent <- overlapPercentRaw["2"]/(overlapPercentRaw["1"]+overlapPercentRaw["2"])
overlapPercent
densityDf$gene <- rownames(densityDf)
for (i in dim(densityDf)[1]) {
tmp_gene_list <- c()
for (j in dim(densityDf)[1]) {
if (i >= j) {next}
geneA <- densityDf[i,]$gene
geneB <- densityDf[j,]$gene
overlapPercentRaw <- table(colSums(corM[c(geneA, geneB),] < 0.5))
overlapPercent <- overlapPercentRaw["2"]/(overlapPercentRaw["1"]+overlapPercentRaw["2"])
if (overlapPercent>=overlap) {
tmp_gene_list <- c(tmp_gene_list, geneB)
}
}
print(tmp_gene_list)
}
dim(densityDf)[1]
for (i in 1:dim(densityDf)[1]) {
tmp_gene_list <- c()
for (j in 1:dim(densityDf)[1]) {
if (i >= j) {next}
geneA <- densityDf[i,]$gene
geneB <- densityDf[j,]$gene
overlapPercentRaw <- table(colSums(corM[c(geneA, geneB),] < 0.5))
overlapPercent <- overlapPercentRaw["2"]/(overlapPercentRaw["1"]+overlapPercentRaw["2"])
if (overlapPercent>=overlap) {
tmp_gene_list <- c(tmp_gene_list, geneB)
}
}
print(tmp_gene_list)
}
overlap=0.8
for (i in 1:dim(densityDf)[1]) {
tmp_gene_list <- c()
for (j in 1:dim(densityDf)[1]) {
if (i >= j) {next}
geneA <- densityDf[i,]$gene
geneB <- densityDf[j,]$gene
overlapPercentRaw <- table(colSums(corM[c(geneA, geneB),] < 0.5))
overlapPercent <- overlapPercentRaw["2"]/(overlapPercentRaw["1"]+overlapPercentRaw["2"])
if (overlapPercent>=overlap) {
tmp_gene_list <- c(tmp_gene_list, geneB)
}
}
print(tmp_gene_list)
}
i <- 1
j <- 2
if (i >= j) {next}
geneA <- densityDf[i,]$gene
geneB <- densityDf[j,]$gene
geneA
geneB
overlapPercentRaw <- table(colSums(corM[c(geneA, geneB),] < 0.5))
overlapPercentRaw
overlapPercent <- overlapPercentRaw["2"]/(overlapPercentRaw["1"]+overlapPercentRaw["2"])
overlapPercent
overlapPercent>=overlap
if (overlapPercent >= overlap) { tmp_gene_list <- c(tmp_gene_list, geneB) }
tmp_gene_list
for (i in 1:dim(densityDf)[1]) {
tmp_gene_list <- c()
for (j in 1:dim(densityDf)[1]) {
if (i >= j) {next}
geneA <- densityDf[i,]$gene
geneB <- densityDf[j,]$gene
overlapPercentRaw <- table(colSums(corM[c(geneA, geneB),] < 0.5))
overlapPercent <- overlapPercentRaw["2"]/(overlapPercentRaw["1"]+overlapPercentRaw["2"])
if (overlapPercent >= overlap) { tmp_gene_list <- c(tmp_gene_list, geneB) }
}
print(tmp_gene_list)
}
tmp_gene_list
overlapPercentRaw
overlapPercentRaw["2"]
if (is.na(overlapPercentRaw["2"])) {next}
for (i in 1:dim(densityDf)[1]) {
tmp_gene_list <- c()
for (j in 1:dim(densityDf)[1]) {
if (i >= j) {next}
geneA <- densityDf[i,]$gene
geneB <- densityDf[j,]$gene
overlapPercentRaw <- table(colSums(corM[c(geneA, geneB),] < 0.5))
if (is.na(overlapPercentRaw["2"])) {next}
overlapPercent <- overlapPercentRaw["2"]/(overlapPercentRaw["1"]+overlapPercentRaw["2"])
if (overlapPercent >= overlap) { tmp_gene_list <- c(tmp_gene_list, geneB) }
}
print(tmp_gene_list)
}
blackList <- c()
for (i in 1:dim(densityDf)[1]) {
tmp_gene_list <- c()
geneA <- densityDf[i,]$gene
for (j in 1:dim(densityDf)[1]) {
if (i >= j) {next}
geneB <- densityDf[j,]$gene
overlapPercentRaw <- table(colSums(corM[c(geneA, geneB),] < 0.5))
if (is.na(overlapPercentRaw["2"])) {next}
overlapPercent <- overlapPercentRaw["2"]/(overlapPercentRaw["1"]+overlapPercentRaw["2"])
if (overlapPercent >= overlap) {
tmp_gene_list <- c(tmp_gene_list, geneB)
blackList <- c(blackList, geneB)
}
}
if (geneA %in% blackList) {next}
print(tmp_gene_list)
}
for (i in 1:dim(densityDf)[1]) {
tmp_gene_list <- c()
geneA <- densityDf[i,]$gene
for (j in 1:dim(densityDf)[1]) {
if (i >= j) {next}
geneB <- densityDf[j,]$gene
overlapPercentRaw <- table(colSums(corM[c(geneA, geneB),] < 0.5))
if (is.na(overlapPercentRaw["2"])) {next}
overlapPercent <- overlapPercentRaw["2"]/(overlapPercentRaw["1"]+overlapPercentRaw["2"])
if (overlapPercent >= overlap) {
tmp_gene_list <- c(tmp_gene_list, geneB)
blackList <- c(blackList, geneB)
}
}
if (geneA %in% blackList) {next}
blackList <- c(blackList, geneA)
print(tmp_gene_list)
}
localCenters=rownames(densityDf)
localCenters
cutThresd=disThresd
cutThresd
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=10)
if (length(intersect(genelist, centerBlackList)) > 0) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
centerBlackList <- unique(c(centerBlackList, genelist))
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
moduleResult
moduleResultbak
center
localCenters
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is in centerBlackList!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=100)
if (length(intersect(genelist, centerBlackList)) > 0) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
centerBlackList <- unique(c(centerBlackList, genelist))
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
moduleResult
moduleResultbak
for (i in 1:length(moduleResultbak)) {
for (j in 1:length(moduleResult)){
if (length(intersect(moduleResult[[j]], moduleResultbak[[i]]))){
moduleResult[[j]] <- unique(c(moduleResult[[j]], moduleResultbak[[i]]))
}
}
}
moduleResult
dis_matrix[rownames(densityDf), rownames(densityDf)]
dis_matrix[rownames(densityDf), rownames(densityDf)][1:5, 1:5]
