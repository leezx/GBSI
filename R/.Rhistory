#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=100)
if (length(intersect(genelist, centerBlackList)) > 0) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
centerBlackList <- unique(c(centerBlackList, genelist))
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
for (i in 1:length(moduleResultbak)) {
for (j in 1:length(moduleResult)){
if (length(intersect(moduleResult[[j]], moduleResultbak[[i]]))){
moduleResult[[j]] <- unique(c(moduleResult[[j]], moduleResultbak[[i]]))
}
}
}
# moduleResultMerge <- list()
count <- 1
overlapPair <- list()
for (i in 1:length(moduleResult)) {
for (j in 1:length(moduleResult)){
if (i >= j) {next}
if ((length(intersect(moduleResult[[j]], moduleResult[[i]]))/(min(length(moduleResult[[j]]), length(moduleResult[[i]]))))>0.5) {
#moduleResultMerge[[count]] <- unique(c(moduleResult[[j]], moduleResult[[i]]))
overlapPair[[count]] <- c(i, j)
count <- count + 1
}
}
}
if (length(overlapPair)>0) {
for (i in 1:length(overlapPair)) {
start <- overlapPair[[i]][1]
end <- overlapPair[[i]][2]
moduleResult[[start]] <- unique(c(moduleResult[[start]], moduleResult[[end]]))
}
for (i in 1:length(overlapPair)) {
end <- overlapPair[[i]][2]
moduleResult[[end]] <- NULL
}
}
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
if (length(moduleResult[[i]]) < minModuleGene) {next}
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
moduleResult
cutThresd=disThresd
cutThresd
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=100)
if (length(intersect(genelist, centerBlackList)) > 0) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
centerBlackList <- unique(c(centerBlackList, genelist))
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
for (i in 1:length(moduleResultbak)) {
for (j in 1:length(moduleResult)){
if (length(intersect(moduleResult[[j]], moduleResultbak[[i]]))){
moduleResult[[j]] <- unique(c(moduleResult[[j]], moduleResultbak[[i]]))
}
}
}
# moduleResultMerge <- list()
count <- 1
overlapPair <- list()
for (i in 1:length(moduleResult)) {
for (j in 1:length(moduleResult)){
if (i >= j) {next}
if ((length(intersect(moduleResult[[j]], moduleResult[[i]]))/(min(length(moduleResult[[j]]), length(moduleResult[[i]]))))>0.5) {
#moduleResultMerge[[count]] <- unique(c(moduleResult[[j]], moduleResult[[i]]))
overlapPair[[count]] <- c(i, j)
count <- count + 1
}
}
}
if (length(overlapPair)>0) {
for (i in 1:length(overlapPair)) {
start <- overlapPair[[i]][1]
end <- overlapPair[[i]][2]
moduleResult[[start]] <- unique(c(moduleResult[[start]], moduleResult[[end]]))
}
for (i in 1:length(overlapPair)) {
end <- overlapPair[[i]][2]
moduleResult[[end]] <- NULL
}
}
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
if (length(moduleResult[[i]]) < minModuleGene) {next}
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
moduleResult
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
View(dis_matrix)
cor_matrix_spearman[cor_matrix_spearman<0] <- 0
dis_matrix <- 1 - abs(cor_matrix_spearman)
dis_matrix[is.na(dis_matrix)] <- 1
dis_matrix[row(dis_matrix)==col(dis_matrix)] <- 1
# dis_matrix <- dis_matrix[use.gene, use.gene]
minPerRow <- apply(dis_matrix, 2, min)
# consider how to evaluate this value
disThresd <- quantile(minPerRow, probs = seq(0, 1, 0.25))[3]
dis_matrix <- dis_matrix[names(minPerRow[minPerRow < disThresd]),names(minPerRow[minPerRow < disThresd])]
# dis_matrix_dist <- as.dist(dis_matrix)
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=100)
if (length(intersect(genelist, centerBlackList)) > 0) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
centerBlackList <- unique(c(centerBlackList, genelist))
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
for (i in 1:length(moduleResultbak)) {
for (j in 1:length(moduleResult)){
if (length(intersect(moduleResult[[j]], moduleResultbak[[i]]))){
moduleResult[[j]] <- unique(c(moduleResult[[j]], moduleResultbak[[i]]))
}
}
}
# moduleResultMerge <- list()
count <- 1
overlapPair <- list()
for (i in 1:length(moduleResult)) {
for (j in 1:length(moduleResult)){
if (i >= j) {next}
if ((length(intersect(moduleResult[[j]], moduleResult[[i]]))/(min(length(moduleResult[[j]]), length(moduleResult[[i]]))))>0.5) {
#moduleResultMerge[[count]] <- unique(c(moduleResult[[j]], moduleResult[[i]]))
overlapPair[[count]] <- c(i, j)
count <- count + 1
}
}
}
if (length(overlapPair)>0) {
for (i in 1:length(overlapPair)) {
start <- overlapPair[[i]][1]
end <- overlapPair[[i]][2]
moduleResult[[start]] <- unique(c(moduleResult[[start]], moduleResult[[end]]))
}
for (i in 1:length(overlapPair)) {
end <- overlapPair[[i]][2]
moduleResult[[end]] <- NULL
}
}
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
if (length(moduleResult[[i]]) < minModuleGene) {next}
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
moduleResult
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 5,]
densityDf <- as.data.frame(densityDf)
densityDf$centrality <- apply(densityDf, 1, function(x) {return(sum(log(1+x) * (1-seq(0.05,disThresd,by=0.05))))})
densityDf <- densityDf[order(densityDf$centrality, decreasing=T),]
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=100)
if (length(intersect(genelist, centerBlackList)) > 0) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
centerBlackList <- unique(c(centerBlackList, genelist))
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
for (i in 1:length(moduleResultbak)) {
for (j in 1:length(moduleResult)){
if (length(intersect(moduleResult[[j]], moduleResultbak[[i]]))){
moduleResult[[j]] <- unique(c(moduleResult[[j]], moduleResultbak[[i]]))
}
}
}
# moduleResultMerge <- list()
count <- 1
overlapPair <- list()
for (i in 1:length(moduleResult)) {
for (j in 1:length(moduleResult)){
if (i >= j) {next}
if ((length(intersect(moduleResult[[j]], moduleResult[[i]]))/(min(length(moduleResult[[j]]), length(moduleResult[[i]]))))>0.5) {
#moduleResultMerge[[count]] <- unique(c(moduleResult[[j]], moduleResult[[i]]))
overlapPair[[count]] <- c(i, j)
count <- count + 1
}
}
}
if (length(overlapPair)>0) {
for (i in 1:length(overlapPair)) {
start <- overlapPair[[i]][1]
end <- overlapPair[[i]][2]
moduleResult[[start]] <- unique(c(moduleResult[[start]], moduleResult[[end]]))
}
for (i in 1:length(overlapPair)) {
end <- overlapPair[[i]][2]
moduleResult[[end]] <- NULL
}
}
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
if (length(moduleResult[[i]]) < minModuleGene) {next}
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
moduleResult
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
cor_matrix_spearman
dis_matrix <- 1 - abs(cor_matrix_spearman)
dis_matrix[is.na(dis_matrix)] <- 1
dis_matrix[row(dis_matrix)==col(dis_matrix)] <- 1
# dis_matrix <- dis_matrix[use.gene, use.gene]
minPerRow <- apply(dis_matrix, 2, min)
# consider how to evaluate this value
disThresd <- quantile(minPerRow, probs = seq(0, 1, 0.25))[3]
dis_matrix <- dis_matrix[names(minPerRow[minPerRow < disThresd]),names(minPerRow[minPerRow < disThresd])]
corM=dis_matrix
disThresd=disThresd
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 5,]
densityDf <- as.data.frame(densityDf)
densityDf$centrality <- apply(densityDf, 1, function(x) {return(sum(log(1+x) * (1-seq(0.05,disThresd,by=0.05))))})
densityDf <- densityDf[order(densityDf$centrality, decreasing=T),]
densityDf
localCenters=rownames(densityDf)
cutThresd=disThresd
corM=dis_matrix
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=100)
if (length(intersect(genelist, centerBlackList)) > 0) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
centerBlackList <- unique(c(centerBlackList, genelist))
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
for (i in 1:length(moduleResultbak)) {
for (j in 1:length(moduleResult)){
if (length(intersect(moduleResult[[j]], moduleResultbak[[i]]))){
moduleResult[[j]] <- unique(c(moduleResult[[j]], moduleResultbak[[i]]))
}
}
}
# moduleResultMerge <- list()
count <- 1
overlapPair <- list()
for (i in 1:length(moduleResult)) {
for (j in 1:length(moduleResult)){
if (i >= j) {next}
if ((length(intersect(moduleResult[[j]], moduleResult[[i]]))/(min(length(moduleResult[[j]]), length(moduleResult[[i]]))))>0.5) {
#moduleResultMerge[[count]] <- unique(c(moduleResult[[j]], moduleResult[[i]]))
overlapPair[[count]] <- c(i, j)
count <- count + 1
}
}
}
if (length(overlapPair)>0) {
for (i in 1:length(overlapPair)) {
start <- overlapPair[[i]][1]
end <- overlapPair[[i]][2]
moduleResult[[start]] <- unique(c(moduleResult[[start]], moduleResult[[end]]))
}
for (i in 1:length(overlapPair)) {
end <- overlapPair[[i]][2]
moduleResult[[end]] <- NULL
}
}
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
if (length(moduleResult[[i]]) < minModuleGene) {next}
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
moduleResult
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
data("Nile")
plot(Nile)
fs.nile <- Fstats(Nile ~ 1)
plot(fs.nile)
install.packages("strucchange")
fs.nile <- Fstats(Nile ~ 1)
plot(fs.nile)
library(strucchange)
fs.nile <- Fstats(Nile ~ 1)
plot(fs.nile)
breakpoints(fs.nile)
lines(breakpoints(fs.nile))
bp.nile <- breakpoints(Nile ~ 1)
summary(bp.nile)
plot(bp.nile)
breakpoints(bp.nile)
install.packages("breakpoint")
library(breakpoint)
data(ch1.GM03563)
ch1.GM03563
plot(ch1.GM03563)
obj1 <- CE.Normal.Mean(ch1.GM03563, distyp = 1, penalty = "mBIC", parallel =TRUE)
obj1
profilePlot(obj1, simdata)
simdata <- as.data.frame(c(rnorm(200,100,5),rnorm(1000,160,8),rnorm(300,120,10)))
simdata
plot(simdata)
obj1 <- CE.Normal.MeanVar(simdata, distyp = 1, penalty = "BIC", parallel =TRUE)
CE.Normal.MeanVar
?CE.Normal.MeanVar
exprM
cellOrder
cellOrder <- sort(apply(exprM, 2, mean))
cellOrder
CE.Normal.MeanVar(cellOrder)
CE.Normal.MeanVar(as.vector(cellOrder))
head(simdata)
CE.Normal.MeanVar(data.frame(as.vector(cellOrder)))
CE.Normal.MeanVar(data.frame(as.vector(cellOrder)), Nmax=1)
a <- data.frame(as.vector(cellOrder))
a
cellOrderdf <- data.frame(as.vector(cellOrder))
CE.Normal.MeanVar(cellOrderdf, Nmax=1)
b <- CE.Normal.MeanVar(cellOrderdf, Nmax=1)
b$BP.Loc
plot(cellOrder, xlab="sorted cells", ylab="mean expression of the module")
abline(v=breakpoint.loc, col="rea")
breakpoint.loc <- CE.Normal.MeanVar(cellOrderdf, Nmax=1)$BP.Loc
plot(cellOrder, xlab="sorted cells", ylab="mean expression of the module")
abline(v=breakpoint.loc, col="rea")
abline(v=breakpoint.loc, col="red")
cellOrder
names(cellOrder)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)$cellOrder
breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
cellOrderInference <- function(expr=exprZscore, module=moduleResultDf[moduleResultDf$module=="1",]$gene){
# module <- moduleResult[[1]]
# exprM <- logcounts(tmp_group)[module,]
exprM <- expr[module,]
# sign <- cor_matrix_spearman[module,module[1]] < 0
# exprM[sign,] <- exprM[sign,]*(-1)
cellOrder <- sort(apply(exprM, 2, mean))
cellOrderdf <- data.frame(as.vector(cellOrder))
library(breakpoint)
breakpoint.loc <- CE.Normal.MeanVar(cellOrderdf, Nmax=1)$BP.Loc
plot(cellOrder, xlab="sorted cells", ylab="mean expression of the module")
abline(v=breakpoint.loc, col="red")
# pheatmap(logcounts(tmp_group)[moduleResult[[1]],names(cellOrder)], show_colnames = F, cluster_rows = T, cluster_cols = F)
return(list(cellOrder=names(cellOrder), breakpoint=breakpoint.loc))
}
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)$cellOrder
breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
cellOrderInference <- function(expr=exprZscore, module=moduleResultDf[moduleResultDf$module=="1",]$gene){
# module <- moduleResult[[1]]
# exprM <- logcounts(tmp_group)[module,]
exprM <- expr[module,]
# sign <- cor_matrix_spearman[module,module[1]] < 0
# exprM[sign,] <- exprM[sign,]*(-1)
cellOrder <- sort(apply(exprM, 2, mean))
cellOrderdf <- data.frame(as.vector(cellOrder))
library(breakpoint)
breakpoint.loc <- CE.Normal.MeanVar(cellOrderdf, Nmax=1)$BP.Loc-1
plot(cellOrder, xlab="sorted cells", ylab="mean expression of the module")
abline(v=breakpoint.loc, col="red")
# pheatmap(logcounts(tmp_group)[moduleResult[[1]],names(cellOrder)], show_colnames = F, cluster_rows = T, cluster_cols = F)
return(list(cellOrder=names(cellOrder), breakpoint=breakpoint.loc))
}
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)$cellOrder
breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
unique(moduleResultDf$module)
