pheatmap(cor_matrix_pearson, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F)
seq(0,1,10)
?seq
rep(c(0,1),30)
expr_log3 <- t(simulate_data(10,100,50,show_name = F))
# add outlier
expr_log3 <- cbind(expr_log3, full=rep(c(9,10),30), empty=rep(c(0,1),30))
pheatmap(expr_log3, cluster_rows = F, cluster_cols = F)
expr_log3 <- t(simulate_data())
expr_log3 <- cbind(expr_log3, full=rep(c(9,10),30), empty=rep(c(0,1),30))
pheatmap(expr_log3, cluster_rows = F, cluster_cols = F)
cor_matrix_pearson <- WGCNA::cor(x = as.matrix((expr_log3)), method = "pearson")
cor_matrix_spearman <- WGCNA::cor(x = as.matrix((expr_log3)), method = "spearman")
# cor_matrix_kendall <- WGCNA::cor(x = as.matrix((expr_log3)), method = "kendall") # too slow
pheatmap(cor_matrix_pearson, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F)
expr_log3 <- t(simulate_data())
expr_log3 <- rbind(expr_log3, full=rep(c(9,10),30), empty=rep(c(0,1),30))
pheatmap(expr_log3, cluster_rows = F, cluster_cols = F)
cor_matrix_pearson <- WGCNA::cor(x = as.matrix((expr_log3)), method = "pearson")
cor_matrix_spearman <- WGCNA::cor(x = as.matrix((expr_log3)), method = "spearman")
# cor_matrix_kendall <- WGCNA::cor(x = as.matrix((expr_log3)), method = "kendall") # too slow
pheatmap(cor_matrix_pearson, cluster_rows = F, cluster_cols = F, show_rownames = T, show_colnames = T)
cor_matrix_pearson[1:5,1:5]
pheatmap(cor_matrix_spearman, cluster_rows = F, cluster_cols = F, show_rownames = T, show_colnames = T)
expr_log3 <- t(simulate_data())
expr_log3 <- rbind(expr_log3, full=rep(c(19,20),30), empty=rep(c(0,1),30))
pheatmap(expr_log3, cluster_rows = F, cluster_cols = F)
cor_matrix_pearson <- WGCNA::cor(x = as.matrix((expr_log3)), method = "pearson")
cor_matrix_spearman <- WGCNA::cor(x = as.matrix((expr_log3)), method = "spearman")
# cor_matrix_kendall <- WGCNA::cor(x = as.matrix((expr_log3)), method = "kendall") # too slow
pheatmap(cor_matrix_spearman, cluster_rows = F, cluster_cols = F, show_rownames = T, show_colnames = T)
pheatmap(cor_matrix_pearson, cluster_rows = F, cluster_cols = F, show_rownames = T, show_colnames = T)
cor_matrix_pearson[1:5,1:5]
pheatmap(t(expr_log3), cluster_rows = F, cluster_cols = F)
expr_log3 <- t(simulate_data())
# expr_log3 <- t(simulate_data(10,100,50,show_name = F))
# add outlier
# expr_log3 <- rbind(expr_log3, full=rep(c(19,20),30), empty=rep(c(0,1),30))
pheatmap(t(expr_log3), cluster_rows = F, cluster_cols = F)
cor_matrix_pearson <- WGCNA::cor(x = as.matrix((expr_log3)), method = "pearson")
cor_matrix_spearman <- WGCNA::cor(x = as.matrix((expr_log3)), method = "spearman")
# cor_matrix_kendall <- WGCNA::cor(x = as.matrix((expr_log3)), method = "kendall") # too slow
pheatmap(cor_matrix_pearson, cluster_rows = F, cluster_cols = F, show_rownames = T, show_colnames = T)
cor_matrix_pearson <- WGCNA::cor(x = as.matrix((expr_log3)), method = "pearson")
cor_matrix_spearman <- WGCNA::cor(x = as.matrix((expr_log3)), method = "spearman")
# cor_matrix_kendall <- WGCNA::cor(x = as.matrix((expr_log3)), method = "kendall") # too slow
pheatmap(cor_matrix_spearman, cluster_rows = F, cluster_cols = F, show_rownames = T, show_colnames = T)
expr_log3 <- t(simulate_data())
# expr_log3 <- t(simulate_data(10,100,50,show_name = F))
# add outlier
expr_log3 <- rbind(expr_log3, full=rep(c(19,20),30), empty=rep(c(0,1),30))
pheatmap(t(expr_log3), cluster_rows = F, cluster_cols = F)
cor_matrix_pearson <- WGCNA::cor(x = as.matrix((expr_log3)), method = "pearson")
cor_matrix_spearman <- WGCNA::cor(x = as.matrix((expr_log3)), method = "spearman")
# cor_matrix_kendall <- WGCNA::cor(x = as.matrix((expr_log3)), method = "kendall") # too slow
pheatmap(cor_matrix_pearson, cluster_rows = F, cluster_cols = F, show_rownames = T, show_colnames = T)
pheatmap(cor_matrix_spearman, cluster_rows = F, cluster_cols = F, show_rownames = T, show_colnames = T)
install.packages("mvoutlier")
library(mvoutlier)
data(bsstop)
x=bsstop[,5:14]
# identify multivariate outliers
x.out=pcout(x,makeplot=FALSE)
# visualize multivariate outliers in the map
op <- par(mfrow=c(1,2))
data(bss.background)
pbb(asp=1)
points(bsstop$XCOO,bsstop$YCOO,pch=16,col=x.out$wfinal01+2)
title("Outlier detection based on pcout")
legend("topleft",legend=c("potential outliers","regular observations"),pch=16,col=c(2,3))
# compare with outlier detection based on MCD:
x.mcd <- robustbase::covMcd(x)
pbb(asp=1)
points(bsstop$XCOO,bsstop$YCOO,pch=16,col=x.mcd$mcd.wt+2)
title("Outlier detection based on MCD")
legend("topleft",legend=c("potential outliers","regular observations"),pch=16,col=c(2,3))
par(op)
bsstop
x
x.out$wfinal01
table(x.out$wfinal01)
table(x.out$wfinal)
x.out$wloc
x.out$x.dist1
x.out$x.dist2
x.out$M1
x.out$const1
simulate_data <- function(logExpr=10, ngene=10, ncell=10, show_matrix=T, show_name=T){
ideal_matrix <- as.data.frame(matrix(rep(logExpr,ngene*ncell), nrow=ngene, ncol=ncell))
rownames(ideal_matrix) <- ((ngene*0+1):(ngene*1))
colnames(ideal_matrix) <- ((ncell*0+1):(ncell*1))
ideal_matrix$name <- rownames(ideal_matrix)
level_matrix <- as.data.frame(matrix(rep(logExpr,ngene*ncell), nrow=ngene, ncol=ncell)/sqrt(seq(1:ngene)))
rownames(level_matrix) <- ((ngene*1+1):(ngene*2))
colnames(level_matrix) <- ((ncell*1+1):(ncell*2))
level_matrix$name <- rownames(level_matrix)
level_matrix2 <- as.data.frame(t(t(as.data.frame(matrix(rep(logExpr,ngene*ncell), nrow=ngene, ncol=ncell)))/sqrt(seq(1:ncell))))
rownames(level_matrix2) <- ((ngene*2+1):(ngene*3))
colnames(level_matrix2) <- ((ncell*2+1):(ncell*3))
level_matrix2$name <- rownames(level_matrix2)
noise_matrix <- as.data.frame(matrix(rep(logExpr,ngene*ncell), nrow=ngene, ncol=ncell))
rownames(noise_matrix) <- ((ngene*3+1):(ngene*4))
colnames(noise_matrix) <- ((ncell*3+1):(ncell*4))
noise_matrix$name <- rownames(noise_matrix)
ideal_matrix2 <- as.data.frame(matrix(rep(0,ngene*ncell), nrow=ngene, ncol=ncell))
rownames(ideal_matrix2) <- ((ngene*4+1):(ngene*5))
colnames(ideal_matrix2) <- ((ncell*4+1):(ncell*5))
ideal_matrix2$name <- rownames(ideal_matrix2)
ideal_matrix3 <- as.data.frame(matrix(rep(logExpr,ngene*ncell), nrow=ngene, ncol=ncell))
rownames(ideal_matrix3) <- ((ngene*5+1):(ngene*6))
colnames(ideal_matrix3) <- ((ncell*5+1):(ncell*6))
ideal_matrix3$name <- rownames(ideal_matrix3)
total_matrix <- merge(merge(ideal_matrix, level_matrix,  by="name", all = T), level_matrix2, by="name", all=T)
total_matrix <- merge(total_matrix, noise_matrix, by="name", all=T)
total_matrix <- merge(total_matrix, ideal_matrix2, by="name", all=T)
total_matrix <- merge(total_matrix, ideal_matrix3, by="name", all=T)
total_matrix[is.na(total_matrix)] <- 0
total_matrix <- total_matrix[order(as.numeric(total_matrix$name)),]
rownames(total_matrix) <- paste("gene",total_matrix$name, sep="_")
colnames(total_matrix) <- paste("cell",colnames(total_matrix), sep="_")
total_matrix2 <- total_matrix
total_matrix2$cell_name <- NULL
# count <- ncell
for (onegene in ((ngene*3+1):(ngene*4))){
cell.no <- as.integer(runif(1, 0, ncell*3/3))
#inside.no <- as.integer(runif(1, 0, cell.no))
#outcell <- sample(((ncell*0+1):(ncell*2)), ncell-count)
outcell <- sample(1:(6*ncell), cell.no)
#incell <- sample(((ncell*2+1):(ncell*3)), ncell-count)
#total_matrix2[onegene, incell] <- runif(1, 0, logExpr)
total_matrix2[onegene, outcell] <- runif(1, 0, logExpr)
#count <- count - 1
#if (count <= 0) {count <- ncell}
}
total_matrix2[((ngene*4+1):(ngene*5)),(ncell*4-as.integer((ncell)/2)):((ncell*4-as.integer((ncell)/2))+ncell-1)] <- logExpr
total_matrix2[((ngene*5+1):(ngene*6)),(ncell*4+1):(ncell*6)] <- logExpr
if (show_matrix){
library(pheatmap)
pheatmap(total_matrix2, cluster_rows = F, cluster_cols = F, show_rownames = show_name, show_colnames = show_name)
}
return(total_matrix2)
}
simulate_data()
t(simulate_data())
x.out=pcout(t(simulate_data()),makeplot=FALSE)
x
class(x)
x.out=pcout(as.data.frame(t(simulate_data())),makeplot=FALSE)
expr_log3 <- t(simulate_data())
# expr_log3 <- t(simulate_data(10,100,50,show_name = F))
# add outlier
expr_log3 <- rbind(expr_log3, full=rep(c(19,20),30), empty=rep(c(0,1),30))
x.out=pcout(expr_log3,makeplot=FALSE)
expr_log3
pheatmap(t(expr_log3), cluster_rows = F, cluster_cols = F)
x.out=pcout(x,makeplot=T)
?png
x.out$wloc
x.out$x.dist1
hist(x.out$x.dist1)
x.out$x.dist1
dim(x)
?pcout
pcout
?mad
?scd
?svd
cumsum
?cumsum
?diag
dim(diag(3))
diag(3)
?qchisq
?mad
?svd
ï¼Ÿcumsum
?cumsum
?diag
?qchisq
dchisq(1, df = 1:3)
qchisq(1, df = 1:3)
qchisq(10, df = 1:3)
qchisq(0.5, df = 1:3)
?scale
(xy <- cbind(x = 1:10, y = c(1:3, 8:5, 8:10)))
w1 <- c(0,0,0,1,1,1,1,1,0,0)
cov.wt(xy, wt = w1) # i.e. method = "unbiased"
cov.wt(xy, wt = w1, method = "ML", cor = TRUE)
library(scater)
data("sc_example_counts")
data("sc_example_cell_info")
example_sce <- SingleCellExperiment(
assays = list(counts = sc_example_counts),
colData = sc_example_cell_info
)
example_sce <- calculateQCMetrics(example_sce)
## with a set of feature controls defined
example_sce <- calculateQCMetrics(example_sce,
feature_controls = list(set1 = 1:40))
isOutlier(example_sce$total_counts, nmads = 3)
example_sce$total_counts
a <- isOutlier(example_sce$total_counts, nmads = 3)
example_sce$total_counts[a]
?dim.red
load("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/ThreeGroup/three_groups.Rdata")
View(RET_CD_DEGs)
View(TCA_DEGs)
View(RET_CD)
load("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/ThreeGroup/three.seperate.Rdata")
View(all_DEGs_sort_1000)
all_DEGs_sort_1000$mark
table(all_DEGs_sort_1000$mark)
table(all_DEGs_sort_2000$mark)
View(all_DEGs)
View(common_DEGs)
View(RET_CD)
View(RET_CD_DEGs)
View(TCA_DEGs)
View(RET_NCD_DEGs)
load("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/3_grouups.Rdata")
RET_NCD
dim(RET_NCD)
View(all_DEGs_sort_2000)
all_DEGs_sort_2000$mark
table(all_DEGs_sort_2000$mark)
write.csv(all_DEGs_sort_2000, file = "/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/ThreeGroup/2000/all_DEGs_sort_2000.csv")
?kmeans
setwd("/Users/surgery/Project/HOME/github/MBSIT/R")
# load("/Users/surgery/Project/HOME/1-projects/1.scRNA-seq/2-smart-seq/eachGroup/HSCR_5c3.Rdata")
options(stringsAsFactors = F)
deng <- readRDS("/Users/surgery/Project/HOME/github/scRNA.seq.course/deng/deng-reads.rds")
expr <- logcounts(deng)
library(scater)
expr <- logcounts(deng)
expr <- expr[rowSums(expr>0)>3,]
pca <- outlierDetection(M=expr, minPts = 5, percent = 0.02)
dengMarkers <- read.csv("/Users/surgery/Project/HOME/github/MBSIT/SC3/nmeth.4236-S3.csv", header = T)
rownames(dengMarkers) <- dengMarkers$Gene
dengMarkers.sig <- dengMarkers[dengMarkers$AUC>0.9 & dengMarkers$p.value<0.01,]
dengMarkers.sig1 <- dengMarkers.sig[dengMarkers.sig$clusts=="7",]
# before
non.non.markersCor <- corMatrix[!rownames(corMatrix)%in%dengMarkers$Gene, !colnames(corMatrix)%in%dengMarkers$Gene]
non.yes.markersCor <- corMatrix[rownames(corMatrix)%in%dengMarkers.sig1$Gene, !colnames(corMatrix)%in%dengMarkers$Gene]
yes.yes.markersCor <- corMatrix[rownames(corMatrix)%in%dengMarkers.sig1$Gene, colnames(corMatrix)%in%dengMarkers.sig1$Gene]
# hist before
cor1 <- quantile(sample(abs(non.non.markersCor), 1000))
cor2 <- quantile(sample(abs(non.yes.markersCor), 1000))
cor3 <- quantile(sample(abs(yes.yes.markersCor), 1000))
#
# after
# non-markers
non.non.markersCor2 <- corMatrix2[!rownames(corMatrix2)%in%dengMarkers$Gene, !colnames(corMatrix2)%in%dengMarkers$Gene]
non.yes.markersCor2 <- corMatrix2[rownames(corMatrix2)%in%dengMarkers.sig1$Gene, !colnames(corMatrix2)%in%dengMarkers$Gene]
yes.yes.markersCor2 <- corMatrix2[rownames(corMatrix2)%in%dengMarkers.sig1$Gene, colnames(corMatrix2)%in%dengMarkers.sig1$Gene]
# hist before
cor4 <- quantile(sample(abs(non.non.markersCor2), 1000))
cor5 <- quantile(sample(abs(non.yes.markersCor2), 1000))
cor6 <- quantile(sample(abs(yes.yes.markersCor2), 1000))
buildGeneNetworkCor <- function(expr=Test_3_Pollen$in_X, thred=0, method="spearman", leastOverlapCell=3){
# exprInteger <- apply(t(expr)>thred,2,function(x) {storage.mode(x) <- 'integer'; x})
# geneOverlap <- t(exprInteger) %*% exprInteger
# use.gene <- rownames(geneOverlap)[apply(geneOverlap, 2, max) > 3]
# expr <- expr[use.gene,]
library(WGCNA)
# standard deviation can't be zero
corMatrix <- WGCNA::cor(x = as.matrix(t(expr)), method = method)
# return(list(corMatrix=corMatrix, use.gene=use.gene))
return(corMatrix)
}
outlierDetection <- function(M=expr, pcNum=100, method="prcomp", minPts=4, percent=0.05, threads=1, plot=T){
exprMatrix <- t(M)
exprMatrix <- exprMatrix[,colSums(exprMatrix)>0]
pcMatrix <- 0
start_time <- Sys.time()
if (method=="prcomp"){
prin_comp <- prcomp(exprMatrix, scale. = T, center = T)
if (pcNum < dim(prin_comp$x)[2]) {
pcMatrix <- prin_comp$x[,1:pcNum]
} else if (pcNum > dim(prin_comp$x)[2]) {
print("ERROR: please choose a smaller pcNum!!!")
} else { pcMatrix <- prin_comp$x }
} else if (method=="pcaMethods"){
library(pcaMethods)
prin_comp <- pca(exprMatrix, scale = "uv", center = T, nPcs = pcNum, method = "svd")
pcMatrix <- prin_comp@scores[,1:pcNum]
}
end_time <- Sys.time()
print("matrix size: ")
print(dim(M))
print(paste("pcNum: ", pcNum, ",method: ", method))
print(end_time - start_time)
# return(pcMatrix)
# parallelDist
library(parallelDist)
dis_matrix <- parDist(x = as.matrix(pcMatrix), method = "euclidean", threads=threads)
dis_matrix <- as.matrix(dis_matrix)
dis_matrix[is.na(dis_matrix)] <- 0
rownames(dis_matrix) <- rownames(pcMatrix)
colnames(dis_matrix) <- rownames(dis_matrix)
disOrder <- sort(apply(dis_matrix, 2, function(x) {return(mean(sort(x)[1:minPts]))}), decreasing=T)
outlier <- disOrder[1:(length(disOrder)*percent)]
pca <- as.data.frame(pcMatrix)
pca$cluster <- 1
pca[names(outlier),]$cluster <- 0
# DBSCAN
# eps <- epsDetection(pcMatrix)
#eps2 <- epsDetection(pcMatrix, start=eps[1], end = eps[2], primary = F, fold = 1)
#res <- dbscan(pcMatrix, eps = eps2, minPts = minPts)
# rownames(winePCAmethods@scores)[res$cluster==0]
#pca <- as.data.frame(pcMatrix)
pca$cluster <- as.character(pca$cluster)
if (plot) {
library(ggplot2)
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point())}
return(pca)
}
pca <- outlierDetection(M=expr, minPts = 5, percent = 0.02)
corMatrix <- buildGeneNetworkCor(expr=expr, method = "pearson")
library("Matrix")
corMatrix <- as(as.matrix(corMatrix), "dgCMatrix")
corMatrix <- buildGeneNetworkCor(expr=expr, method = "pearson")
dengMarkers <- read.csv("/Users/surgery/Project/HOME/github/MBSIT/SC3/nmeth.4236-S3.csv", header = T)
rownames(dengMarkers) <- dengMarkers$Gene
dengMarkers.sig <- dengMarkers[dengMarkers$AUC>0.9 & dengMarkers$p.value<0.01,]
dengMarkers.sig1 <- dengMarkers.sig[dengMarkers.sig$clusts=="7",]
non.non.markersCor <- corMatrix[!rownames(corMatrix)%in%dengMarkers$Gene, !colnames(corMatrix)%in%dengMarkers$Gene]
non.yes.markersCor <- corMatrix[rownames(corMatrix)%in%dengMarkers.sig1$Gene, !colnames(corMatrix)%in%dengMarkers$Gene]
yes.yes.markersCor <- corMatrix[rownames(corMatrix)%in%dengMarkers.sig1$Gene, colnames(corMatrix)%in%dengMarkers.sig1$Gene]
# hist before
cor1 <- quantile(sample(abs(non.non.markersCor), 1000))
cor2 <- quantile(sample(abs(non.yes.markersCor), 1000))
cor3 <- quantile(sample(abs(yes.yes.markersCor), 1000))
rm(corMatrix, non.non.markersCor, non.yes.markersCor, yes.yes.markersCor)
cor1
corMatrix2 <- buildGeneNetworkCor(expr=expr[,pca$cluster=="1"], , method = "pearson")
pca$cluster=="1"
pca$cluster=="1"
colnames(pca)
rownames(pca)
rownames(pca)[pca$cluster=="1"]
rownames(pca)
pca$cluster=="1"
length(pca$cluster=="1")
rownames(pca)[pca$cluster=="1"]
length(pca$cluster=="1")
length(rownames(pca)[pca$cluster=="1"])
dim(expr[,rownames(pca)[pca$cluster=="1"]])
corMatrix2 <- buildGeneNetworkCor(expr=expr[,rownames(pca)[pca$cluster=="1"]], , method = "pearson")
dim(corMatrix2)
non.non.markersCor2 <- corMatrix2[!rownames(corMatrix2)%in%dengMarkers$Gene, !colnames(corMatrix2)%in%dengMarkers$Gene]
non.yes.markersCor2 <- corMatrix2[rownames(corMatrix2)%in%dengMarkers.sig1$Gene, !colnames(corMatrix2)%in%dengMarkers$Gene]
yes.yes.markersCor2 <- corMatrix2[rownames(corMatrix2)%in%dengMarkers.sig1$Gene, colnames(corMatrix2)%in%dengMarkers.sig1$Gene]
# hist before
cor4 <- quantile(sample(abs(non.non.markersCor2), 1000))
cor5 <- quantile(sample(abs(non.yes.markersCor2), 1000))
cor6 <- quantile(sample(abs(yes.yes.markersCor2), 1000))
rm(corMatrix2, non.non.markersCor2, non.yes.markersCor2, yes.yes.markersCor2)
cor1
cor4
cor2
cor5
cor3
cor6
corMatrix <- buildGeneNetworkCor(expr=expr, method = "pearson")
sc3_interactive(deng)
library(SC3)
sc3_interactive(deng)
deng <- sc3_calc_consens(deng)
deng$cell_type1
table(deng$cell_type1)
all_markers_raw <- get_marker_genes(logcounts(deng), deng$cell_type1)
source("/Users/surgery/Project/HOME/myScript/zxli_lib.R") # my R lib
all_markers <- all_markers_raw[all_markers_raw$auroc>0.85 & !is.na(all_markers_raw$auroc) & all_markers_raw$pvalue < 0.01,]
sc3_marker <- data.frame(name=rownames(deng)[as.numeric(rownames(all_markers))], cluster=all_markers$clusts)
rownames(sc3_marker) <- sc3_marker$name
sc3_marker
table(sc3_marker$cluster)
sc3_marker[sc3_marker$cluster=="2cell",]$name
draw_heatmap_SC3(tmp_group = deng, deng$cell_type1, sc3_marker[sc3_marker$cluster=="2cell",]$name, cluster_rows = F)
library(pheatmap)
draw_heatmap_SC3(tmp_group = deng, deng$cell_type1, sc3_marker[sc3_marker$cluster=="2cell",]$name, cluster_rows = F)
draw_heatmap_SC3
draw_heatmap_SC3(tmp_group = deng, deng$cell_type1, sc3_marker[sc3_marker$cluster=="2cell",]$name, cluster_rows = F, annotation_colors = list())
pheatmap(logcounts(deng)[sc3_marker[sc3_marker$cluster=="2cell",]$name, order(deng$cell_type1)], cluster_rows = F)
pheatmap(logcounts(deng)[sc3_marker[sc3_marker$cluster=="2cell",]$name, order(deng$cell_type1)], cluster_rows = F, show_rownames = F, show_colnames = F)
pheatmap(logcounts(deng)[sc3_marker[sc3_marker$cluster=="2cell",]$name, order(deng$cell_type1)], cluster_rows = F, show_rownames = F, show_colnames = F, cluster_cols = F)
pheatmap(logcounts(deng)[sc3_marker[sc3_marker$cluster=="2cell",]$name, order(deng$cell_type1)], cluster_rows = T, show_rownames = F, show_colnames = F, cluster_cols = F)
annotation_col <- data.frame(Cluster = factor(deng$cell_type1), row.names = colnames(deng))
annotation_col
pheatmap(logcounts(deng)[sc3_marker[sc3_marker$cluster=="2cell",]$name, order(deng$cell_type1)], cluster_rows = T, show_rownames = F, show_colnames = F, cluster_cols = F, annotation_col = annotation_col)
all_markers <- all_markers_raw[all_markers_raw$auroc>0.9 & !is.na(all_markers_raw$auroc) & all_markers_raw$pvalue < 0.005,]
sc3_marker <- data.frame(name=rownames(deng)[as.numeric(rownames(all_markers))], cluster=all_markers$clusts)
rownames(sc3_marker) <- sc3_marker$name
annotation_col <- data.frame(Cluster = factor(deng$cell_type1), row.names = colnames(deng))
pheatmap(logcounts(deng)[sc3_marker[sc3_marker$cluster=="2cell",]$name, order(deng$cell_type1)], cluster_rows = T, show_rownames = F, show_colnames = F, cluster_cols = F, annotation_col = annotation_col)
all_markers <- all_markers_raw[all_markers_raw$auroc>0.95 & !is.na(all_markers_raw$auroc) & all_markers_raw$pvalue < 0.001,]
sc3_marker <- data.frame(name=rownames(deng)[as.numeric(rownames(all_markers))], cluster=all_markers$clusts)
rownames(sc3_marker) <- sc3_marker$name
annotation_col <- data.frame(Cluster = factor(deng$cell_type1), row.names = colnames(deng))
pheatmap(logcounts(deng)[sc3_marker[sc3_marker$cluster=="2cell",]$name, order(deng$cell_type1)], cluster_rows = T, show_rownames = F, show_colnames = F, cluster_cols = F, annotation_col = annotation_col)
a <- logcounts(deng)[sc3_marker[sc3_marker$cluster=="2cell",]$name, order(deng$cell_type1)]
dim(a)
table(deng$cell_type1)
a[rowSums(a>0)<30,]
dim(a[rowSums(a>0)<30,])
rowSums(a>0)
colSums(a>0)<30
a[rowSums(a>0)<30,]
a[rowSums(a>0)<100,]
a <- a[rowSums(a>0)<100,]
pheatmap(a, cluster_rows = T, show_rownames = F, show_colnames = F, cluster_cols = F, annotation_col = annotation_col)
corMatrix[rownames(a), rownames(a)]
hist(corMatrix[rownames(a), rownames(a)])
non.non.markersCor <- corMatrix[!rownames(corMatrix)%in%dengMarkers$Gene, !colnames(corMatrix)%in%dengMarkers$Gene]
non.yes.markersCor <- corMatrix[rownames(corMatrix)%in%rownames(a), !colnames(corMatrix)%in%dengMarkers$Gene]
yes.yes.markersCor <- corMatrix[rownames(corMatrix)%in%rownames(a), colnames(corMatrix)%in%rownames(a)]
yes.yes.markersCor
as.vector(yes.yes.markersCor)
dim(yes.yes.markersCor)
cor1 <- (sample(abs(non.non.markersCor), 1000))
cor2 <- (sample(abs(non.yes.markersCor), 1000))
cor3 <- (sample(abs(yes.yes.markersCor), 1000))
cor1
cor2
corMatrix2 <- buildGeneNetworkCor(expr=expr[,rownames(pca)[pca$cluster=="1"]], , method = "pearson")
rm(non.non.markersCor, non.yes.markersCor, yes.yes.markersCor)
non.non.markersCor2 <- corMatrix2[!rownames(corMatrix2)%in%dengMarkers$Gene, !colnames(corMatrix2)%in%dengMarkers$Gene]
non.yes.markersCor2 <- corMatrix2[rownames(corMatrix2)%in%rownames(a), !colnames(corMatrix2)%in%dengMarkers$Gene]
yes.yes.markersCor2 <- corMatrix2[rownames(corMatrix2)%in%rownames(a), colnames(corMatrix2)%in%rownames(a)]
# hist before
cor4 <- (sample(abs(non.non.markersCor2), 1000))
cor5 <- (sample(abs(non.yes.markersCor2), 1000))
cor6 <- (sample(abs(yes.yes.markersCor2), 1000))
rm(non.non.markersCor2, non.yes.markersCor2, yes.yes.markersCor2)
cor4
mean(cor1)
mean(cor4)
mean(cor2)
mean(cor5)
mean(cor3)
mean(cor6)
hist(cor3)
hist(cor6)
b <- corMatrix[rownames(a), rownames(a)]
b
apply(b, 2, min)
hist(apply(b, 2, min))
b[apply(b, 2, min)>0.50,]
b <- b[apply(b, 2, min)>0.50,]
b
dim(b)
non.non.markersCor <- corMatrix[!rownames(corMatrix)%in%dengMarkers$Gene, !colnames(corMatrix)%in%dengMarkers$Gene]
non.yes.markersCor <- corMatrix[rownames(corMatrix)%in%rownames(b), !colnames(corMatrix)%in%dengMarkers$Gene]
yes.yes.markersCor <- corMatrix[rownames(corMatrix)%in%rownames(b), colnames(corMatrix)%in%rownames(b)]
# hist before
cor1 <- (sample(abs(non.non.markersCor), 1000))
cor2 <- (sample(abs(non.yes.markersCor), 1000))
cor3 <- (sample(abs(yes.yes.markersCor), 1000))
mean(cor1)
mean(cor2)
mean(cor3)
non.non.markersCor2 <- corMatrix2[!rownames(corMatrix2)%in%dengMarkers$Gene, !colnames(corMatrix2)%in%dengMarkers$Gene]
non.yes.markersCor2 <- corMatrix2[rownames(corMatrix2)%in%rownames(b), !colnames(corMatrix2)%in%dengMarkers$Gene]
yes.yes.markersCor2 <- corMatrix2[rownames(corMatrix2)%in%rownames(b), colnames(corMatrix2)%in%rownames(b)]
# hist before
cor4 <- (sample(abs(non.non.markersCor2), 1000))
cor5 <- (sample(abs(non.yes.markersCor2), 1000))
cor6 <- (sample(abs(yes.yes.markersCor2), 1000))
non.non.markersCor2 <- corMatrix2[!rownames(corMatrix2)%in%dengMarkers$Gene, !colnames(corMatrix2)%in%dengMarkers$Gene]
non.yes.markersCor2 <- corMatrix2[rownames(corMatrix2)%in%rownames(b), !colnames(corMatrix2)%in%dengMarkers$Gene]
yes.yes.markersCor2 <- corMatrix2[rownames(corMatrix2)%in%rownames(b), colnames(corMatrix2)%in%rownames(b)]
# hist before
cor4 <- (sample(abs(non.non.markersCor2), 1000))
cor5 <- (sample(abs(non.yes.markersCor2), 1000))
cor6 <- (sample(abs(yes.yes.markersCor2), 1000))
rm(non.non.markersCor, non.yes.markersCor, yes.yes.markersCor)
rm(non.non.markersCor2, non.yes.markersCor2, yes.yes.markersCor2)
mean(cor3)
mean(cor6)
load("/Users/surgery/Project/HOME/1-projects/1.scRNA-seq/2-smart-seq/eachGroup/HSCR_5c3.Rdata")
rm(corMatrix, corMatrix2)
pca <- outlierDetection(M=logcounts(tmp_group), minPts = 5, percent = 0.02)
tmp_group[,pca$cluster=="0"]
tmp_group[,pca$cluster=="0"]$rename_sc3_4
pca <- outlierDetection(M=logcounts(tmp_group), minPts = 3, percent = 0.02)
tmp_group[,pca$cluster=="0"]$rename_sc3_4
pca <- outlierDetection(M=logcounts(tmp_group), minPts = 3, percent = 0.02, pcNum = 363)
tmp_group[,pca$cluster=="0"]$rename_sc3_4
pca <- outlierDetection(M=logcounts(tmp_group), minPts = 3, percent = 0.02, pcNum = 2)
tmp_group[,pca$cluster=="0"]$rename_sc3_4
corMatrix <- buildGeneNetworkCor(expr=logcounts(tmp_group), method = "pearson")
a <- c("SEMA3D","SMAGP","KRT7","CLDN4","CLDN7","CDH1","EFNA1","ACSM3","WNT6")
a
cor4 <- sample(corMatrix[a,a], 1000)
corMatrix[a,a]
cor4 <- as.vector(corMatrix[a,a])
cor4
mean(cor4)
corMatrix2 <- buildGeneNetworkCor(expr=logcounts(tmp_group)[,rownames(pca)[pca$cluster=="1"]], , method = "pearson")
cor5 <- as.vector(corMatrix2[a,a])
mean(cor5)
hist(cor4)
hist(cor5)
table(pca$cluster)
rownames(pca)[pca$cluster=="1"]
pca <- outlierDetection(M=logcounts(tmp_group), minPts = 5, percent = 0.01, pcNum = 2)
corMatrix <- buildGeneNetworkCor(expr=logcounts(tmp_group), method = "pearson")
corMatrix2 <- buildGeneNetworkCor(expr=logcounts(tmp_group)[,rownames(pca)[pca$cluster=="1"]], , method = "pearson")
cor4 <- as.vector(corMatrix[a,a])
cor5 <- as.vector(corMatrix2[a,a])
mean(cor4)
mean(cor5)
