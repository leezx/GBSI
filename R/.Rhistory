moduleResult[[count]] <- genelist
count <- count + 1
}
}
localCenters=rownames(densityDf)
colnames(corMsub)[(corMsub[center,] <= cutThresd) > 0]
(corMsub[center,] <= cutThresd)
colnames(corMsub)[(corMsub[center,] <= cutThresd)]
corMsub <- corM[localCenters,localCenters]
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste("new", center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=10)
# if (length(intersect(genelist, centerBlackList)) > 0) {
#   moduleResultbak[[count2]] <- genelist
#   count2 <- count2 + 1
#   next
# }
if (length(genelist)==1) {
genelist2 <- colnames(corMsub)[(corMsub[center,] <= cutThresd)]
} else {
genelist2 <- colnames(corMsub)[colSums(corMsub[genelist,] <= cutThresd) > 0]
}
centerBlackList <- unique(c(centerBlackList, genelist, genelist2))
if (length(genelist) >= minModuleGene){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste("new", center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=10)
# if (length(intersect(genelist, centerBlackList)) > 0) {
#   moduleResultbak[[count2]] <- genelist
#   count2 <- count2 + 1
#   next
# }
if (length(genelist)==1) {
genelist2 <- colnames(corM)[(corM[center,] <= cutThresd)]
} else {
genelist2 <- colnames(corM)[colSums(corM[genelist,] <= cutThresd) > 0]
}
centerBlackList <- unique(c(centerBlackList, genelist, genelist2))
if (length(genelist) >= minModuleGene){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
moduleResult
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
if (length(moduleResult[[i]]) < minModuleGene) {next}
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
moduleResultDf
expr <- expr_matrix2
exprZscore <- (expr-apply(expr, 1, mean))/apply(expr, 1, sd)
library(pheatmap)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)$cellOrder
breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
moduleResultDf
unique(moduleResultDf$module)
i <- "1"
module <- moduleResultDf[moduleResultDf$module==i,]$gene
module
cellOrder <- cellOrderInference(exprZscore, module)$cellOrder
cellOrder
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)$cellOrder
#breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
i
i <- "2"
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)$cellOrder
moduleResultDf
moduleResultDf$module==i
moduleResultDf[moduleResultDf$module==i,]$gene
module <- moduleResultDf[moduleResultDf$module==i,]$gene
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)$cellOrder
#breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
i
module <- moduleResultDf[moduleResultDf$module==i,]$gene
module
cellOrder <- cellOrderInference(exprZscore, module)$cellOrder
cellOrderInference
cellOrderInference <- function(expr=exprZscore, module=moduleResultDf[moduleResultDf$module=="1",]$gene){
# module <- moduleResult[[1]]
# exprM <- logcounts(tmp_group)[module,]
exprM <- expr[module,]
# sign <- cor_matrix_spearman[module,module[1]] < 0
# exprM[sign,] <- exprM[sign,]*(-1)
cellOrder <- sort(apply(exprM, 2, mean))
cellOrderdf <- data.frame(as.vector(cellOrder))
library(breakpoint)
breakpoint.loc <- CE.Normal.MeanVar(cellOrderdf, Nmax=1)$BP.Loc-1
plot(cellOrder, xlab="sorted cells", ylab="mean expression of the module")
# abline(v=breakpoint.loc, col="red")
# pheatmap(logcounts(tmp_group)[moduleResult[[1]],names(cellOrder)], show_colnames = F, cluster_rows = T, cluster_cols = F)
# return(list(cellOrder=names(cellOrder), breakpoint=breakpoint.loc))
return(names(cellOrder))
}
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)$cellOrder
#breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)
#breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)
cellOrderInference
cellOrder <- cellOrderInference(expr=exprZscore, module=module)
cellOrderInference(expr=exprZscore, module=module)
cellOrderInference <- function(expr=exprZscore, module=moduleResultDf[moduleResultDf$module=="1",]$gene){
# module <- moduleResult[[1]]
# exprM <- logcounts(tmp_group)[module,]
exprM <- expr[module,]
# sign <- cor_matrix_spearman[module,module[1]] < 0
# exprM[sign,] <- exprM[sign,]*(-1)
cellOrder <- sort(apply(exprM, 2, mean))
# cellOrderdf <- data.frame(as.vector(cellOrder))
# library(breakpoint)
# breakpoint.loc <- CE.Normal.MeanVar(cellOrderdf, Nmax=1)$BP.Loc-1
plot(cellOrder, xlab="sorted cells", ylab="mean expression of the module")
# abline(v=breakpoint.loc, col="red")
# pheatmap(logcounts(tmp_group)[moduleResult[[1]],names(cellOrder)], show_colnames = F, cluster_rows = T, cluster_cols = F)
# return(list(cellOrder=names(cellOrder), breakpoint=breakpoint.loc))
return(names(cellOrder))
}
cellOrderInference(expr=exprZscore, module=module)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(expr=exprZscore, module=module)
#breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
moduleResultDf
moduleResult
setwd("/Users/surgery/Project/HOME/github/MBSIT/R")
load("/Users/surgery/Project/HOME/1-projects/1.scRNA-seq/2-smart-seq/eachGroup/HSCR_5c3.Rdata")
options(stringsAsFactors = F)
expr_log3 <- t(logcounts(tmp_group))
expr_log3 <- expr_log3[,colSums(expr_log3>0)>3]
library(WGCNA)
# standard deviation can't be zero
# cor_matrix_pearson <- WGCNA::cor(x = as.matrix((expr_log3)), method = "pearson")
cor_matrix_spearman <- WGCNA::cor(x = as.matrix((expr_log3)), method = "spearman")
cor_matrix_spearman[cor_matrix_spearman<0] <- 0
dis_matrix <- 1 - abs(cor_matrix_spearman)
dis_matrix[is.na(dis_matrix)] <- 1
dis_matrix[row(dis_matrix)==col(dis_matrix)] <- 1
# dis_matrix <- dis_matrix[use.gene, use.gene]
minPerRow <- apply(dis_matrix, 2, min)
# consider how to evaluate this value
disThresd <- quantile(minPerRow, probs = seq(0, 1, 0.1))[2]
disThresd
dis_matrix2 <- dis_matrix
dis_matrix <- dis_matrix[names(minPerRow[minPerRow < disThresd]),names(minPerRow[minPerRow < disThresd])]
corM=dis_matrix
start <- disThresd/10
by <- disThresd/10
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(start,disThresd,by=by)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(start,disThresd,by=by))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 2,]
densityDf <- as.data.frame(densityDf)
densityDf$centrality <- apply(densityDf, 1, function(x) {return(sum(log10(1+x) * (max(seq(start,disThresd+by,by=by))-seq(start,disThresd,by=by))))})
densityDf <- densityDf[order(densityDf$centrality, decreasing=T),]
localCenters=rownames(densityDf)
minModuleGene=8
cutThresd=disThresd
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste("new", center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=topGene)
# move all other genes to noise gene
if (length(genelist)==1) {
genelist2 <- colnames(corM)[(corM[center,] <= cutThresd)]
} else {
genelist2 <- colnames(corM)[colSums(corM[genelist,] <= cutThresd) > 0]
}
centerBlackList <- unique(c(centerBlackList, genelist, genelist2))
# creat module
if (length(genelist) >= minModuleGene){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
# transfer to dataframe
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
if (length(moduleResult[[i]]) < minModuleGene) {next}
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
topGene=10
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste("new", center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=topGene)
# move all other genes to noise gene
if (length(genelist)==1) {
genelist2 <- colnames(corM)[(corM[center,] <= cutThresd)]
} else {
genelist2 <- colnames(corM)[colSums(corM[genelist,] <= cutThresd) > 0]
}
centerBlackList <- unique(c(centerBlackList, genelist, genelist2))
# creat module
if (length(genelist) >= minModuleGene){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
# transfer to dataframe
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
if (length(moduleResult[[i]]) < minModuleGene) {next}
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
moduleResultDf
expr <- logcounts(tmp_group)
# expr <- expr_matrix2
exprZscore <- (expr-apply(expr, 1, mean))/apply(expr, 1, sd)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(expr=exprZscore, module=module)
#breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
genelist
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste("new", center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=cutThresd, centerBlackList=centerBlackList, topCount=topGene)
# move all other genes to noise gene
# if (length(genelist)==1) {
genelist2 <- colnames(corM)[(corM[center,] <= cutThresd)]
# } else {
#   genelist2 <- colnames(corM)[colSums(corM[genelist,] <= cutThresd) > 0]
# }
centerBlackList <- unique(c(centerBlackList, genelist, genelist2))
# creat module
if (length(genelist) >= minModuleGene){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
# transfer to dataframe
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
if (length(moduleResult[[i]]) < minModuleGene) {next}
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
moduleResultDf
moduleResult
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(expr=exprZscore, module=module)
#breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = F)
}
library(pheatmap)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(expr=exprZscore, module=module)
#breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = T)
}
moduleResult
library(pheatmap)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(expr=exprZscore, module=module)
#breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(exprZscore[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = T)
}
densityDf
dim(dis_matrix)
dis_matrix[rownames(densityDf),]
dis_matrix[rownames(densityDf),rownames(densityDf)]
dis_matrix[rownames(densityDf),rownames(densityDf)][1:5,1:5]
dis_matrix[rownames(densityDf),rownames(densityDf)] <- dis_matrix[rownames(densityDf),rownames(densityDf)]/2
dis_matrix[rownames(densityDf),rownames(densityDf)][1:5,1:5]
dis_matrix <- dis_matrix2
dis_matrix[rownames(densityDf),rownames(densityDf)][1:5,1:5]
corM
center
center<-"CLDN6"
genelist <- c(center)
centerBlackList=c(centerBlackList, center)
corM[center,!colnames(corM)%in%genelist]
corM[center,!colnames(corM)%in%genelist]
corM[center,!colnames(corM)%in%genelist]
moduleResultFull <- moduleResult
moduleResultFull
count <- 1
genelist <- moduleResultFull[[count]]
genelist
corM[genelist,]
corM[genelist,] < cutThresd
colSums(corM[genelist,] < cutThresd)
colSums(corM[genelist,] < cutThresd) > length(genelist)/2
colnames(corM)[colSums(corM[genelist,] < cutThresd) > length(genelist)/2]
hist(colSums(corM[genelist,] < cutThresd))
colnames(corM)[colSums(corM[genelist,] < cutThresd) > length(genelist)/3]
colnames(corM)[colSums(corM[genelist,] < cutThresd) > length(genelist)/4]
centerBlackList=c()
fullGenelist <- fullGenelist[!fullGenelist%in%centerBlackList]
fullGenelist <- colnames(corM)[colSums(corM[genelist,] < cutThresd) > length(genelist)/4]
fullGenelist <- fullGenelist[!fullGenelist%in%centerBlackList]
fullGenelist
moduleResultFull[[count]] <- fullGenelist
moduleResultFull
centerBlackList <- c(centerBlackList, moduleResultFull)
moduleResultFull <- moduleResult
count <- 1
centerBlackList=c()
for (i in 1:length(moduleResultFull)) {
genelist <- moduleResultFull[[count]]
fullGenelist <- colnames(corM)[colSums(corM[genelist,] < cutThresd) > length(genelist)/4]
fullGenelist <- fullGenelist[!fullGenelist%in%centerBlackList]
moduleResultFull[[count]] <- fullGenelist
centerBlackList <- c(centerBlackList, moduleResultFull)
count <- count + 1
}
moduleResultFull
count <- 1
genelist <- moduleResultFull[[count]]
genelist <- moduleResultFull[[count]]
genelist
densityDfSub[genelist,]
densityDf[genelist,]
densityDfSub <- densityDf[genelist[genelist%in%rownames(genelist)],]
densityDfSub
densityDfSub <- densityDf[genelist[genelist%in%rownames(densityDf)],]
densityDfSub
densityDfSub <- densityDfSub[order(densityDfSub$centrality, decreasing=T)]
densityDfSub <- densityDfSub[order(densityDfSub$centrality, decreasing=T),]
densityDfSub
rownames(densityDfSub)[1:10]
count <- 1
newModuleResult <- list()
for (i in 1:length(moduleResultFull)) {
genelist <- moduleResultFull[[count]]
densityDfSub <- densityDf[genelist[genelist%in%rownames(densityDf)],]
densityDfSub <- densityDfSub[order(densityDfSub$centrality, decreasing=T),]
newModuleResult[[count]] <- rownames(densityDfSub)[1:10]
count <- count + 1
}
newModuleResult
moduleResult
transferListToDf <- function(moduleResult=moduleResult) {
# transfer to dataframe
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
#if (length(moduleResult[[i]]) < minModuleGene) {next}
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
return(moduleResultDf)
}
transferListToDf()
transferListToDf(moduleResult=moduleResult)
moduleResultDf <- transferListToDf(moduleResult=moduleResultFull)
moduleResultDf
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(expr=exprZscore, module=module)
#breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(exprZscore[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = T)
}
moduleResultDf <- transferListToDf(moduleResult=newModuleResult)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(expr=exprZscore, module=module)
#breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(exprZscore[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = T)
}
moduleResultDf <- transferListToDf(moduleResult=ModuleResult)
moduleResultDf <- transferListToDf(moduleResult=moduleResult)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(expr=exprZscore, module=module)
#breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(exprZscore[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = T)
}
moduleResultDf <- transferListToDf(moduleResult=newModuleResult)
library(pheatmap)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(expr=exprZscore, module=module)
#breakpoint.loc <- cellOrderInference(exprZscore, module)$breakpoint
pheatmap(exprZscore[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F, show_rownames = T)
}
