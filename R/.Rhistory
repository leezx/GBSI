totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=0.6, centerBlackList=centerBlackList, topCount=100)
if (length(intersect(genelist, centerBlackList)) > 0) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
centerBlackList <- unique(c(centerBlackList, genelist))
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
for (i in 1:length(moduleResultbak)) {
for (j in 1:length(moduleResult)){
if (length(intersect(moduleResult[[j]], moduleResultbak[[i]]))){
moduleResult[[j]] <- unique(c(moduleResult[[j]], moduleResultbak[[i]]))
}
}
}
# moduleResultMerge <- list()
count <- 1
overlapPair <- list()
for (i in 1:length(moduleResult)) {
for (j in 1:length(moduleResult)){
if (i >= j) {next}
if ((length(intersect(moduleResult[[j]], moduleResult[[i]]))/length(unique(moduleResult[[j]], moduleResult[[i]])))>0.8) {
#moduleResultMerge[[count]] <- unique(c(moduleResult[[j]], moduleResult[[i]]))
overlapPair[[count]] <- c(i, j)
count <- count + 1
}
}
}
if (length(overlapPair)>0) {
for (i in 1:length(overlapPair)) {
start <- overlapPair[[i]][1]
end <- overlapPair[[i]][2]
moduleResult[[start]] <- unique(c(moduleResult[[start]], moduleResult[[end]]))
moduleResult[[end]] <- NULL
}
}
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
moduleResultDf
table(moduleResultDf$module)
gene <- a
moduleResultDf[gene[gene%in%moduleResultDf$gene],]
gene <- b
moduleResultDf[gene[gene%in%moduleResultDf$gene],]
corM=dis_matrix
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=0.6, centerBlackList=centerBlackList, topCount=100)
if (length(intersect(genelist, centerBlackList)) > 0) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
centerBlackList <- unique(c(centerBlackList, genelist))
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
for (i in 1:length(moduleResultbak)) {
for (j in 1:length(moduleResult)){
if (length(intersect(moduleResult[[j]], moduleResultbak[[i]]))){
moduleResult[[j]] <- unique(c(moduleResult[[j]], moduleResultbak[[i]]))
}
}
}
# moduleResultMerge <- list()
count <- 1
overlapPair <- list()
for (i in 1:length(moduleResult)) {
for (j in 1:length(moduleResult)){
if (i >= j) {next}
if ((length(intersect(moduleResult[[j]], moduleResult[[i]]))/length(unique(moduleResult[[j]], moduleResult[[i]])))>0.8) {
#moduleResultMerge[[count]] <- unique(c(moduleResult[[j]], moduleResult[[i]]))
overlapPair[[count]] <- c(i, j)
count <- count + 1
}
}
}
if (length(overlapPair)>0) {
for (i in 1:length(overlapPair)) {
start <- overlapPair[[i]][1]
end <- overlapPair[[i]][2]
moduleResult[[start]] <- unique(c(moduleResult[[start]], moduleResult[[end]]))
moduleResult[[end]] <- NULL
}
}
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
dim(corM)
corM[1:5,1:5]
localCenters=densityDf
localCenters
corM=dis_matrix
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=0.6, centerBlackList=centerBlackList, topCount=100)
if (length(intersect(genelist, centerBlackList)) > 0) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
centerBlackList <- unique(c(centerBlackList, genelist))
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
moduleResult
moduleResultbak
for (i in 1:length(moduleResultbak)) {
for (j in 1:length(moduleResult)){
if (length(intersect(moduleResult[[j]], moduleResultbak[[i]]))){
moduleResult[[j]] <- unique(c(moduleResult[[j]], moduleResultbak[[i]]))
}
}
}
# moduleResultMerge <- list()
count <- 1
overlapPair <- list()
for (i in 1:length(moduleResult)) {
for (j in 1:length(moduleResult)){
if (i >= j) {next}
if ((length(intersect(moduleResult[[j]], moduleResult[[i]]))/length(unique(moduleResult[[j]], moduleResult[[i]])))>0.8) {
#moduleResultMerge[[count]] <- unique(c(moduleResult[[j]], moduleResult[[i]]))
overlapPair[[count]] <- c(i, j)
count <- count + 1
}
}
}
overlapPair
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
gene <- a
moduleResultDf[gene[gene%in%moduleResultDf$gene],]
gene <- b
moduleResultDf[gene[gene%in%moduleResultDf$gene],]
gene <- c
moduleResultDf[gene[gene%in%moduleResultDf$gene],]
gene <- d
moduleResultDf[gene[gene%in%moduleResultDf$gene],]
gene <- e
moduleResultDf[gene[gene%in%moduleResultDf$gene],]
moduleResultDf
table(moduleResultDf$module)
pdf('moduleResult.pdf')
library(pheatmap)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(module)
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F)
}
dev.off()
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=0.6, centerBlackList=centerBlackList, topCount=100)
if (length(intersect(genelist, centerBlackList)) > 0) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
centerBlackList <- unique(c(centerBlackList, genelist))
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
for (i in 1:length(moduleResultbak)) {
for (j in 1:length(moduleResult)){
if (length(intersect(moduleResult[[j]], moduleResultbak[[i]]))){
moduleResult[[j]] <- unique(c(moduleResult[[j]], moduleResultbak[[i]]))
}
}
}
# moduleResultMerge <- list()
count <- 1
overlapPair <- list()
for (i in 1:length(moduleResult)) {
for (j in 1:length(moduleResult)){
if (i >= j) {next}
if ((length(intersect(moduleResult[[j]], moduleResult[[i]]))/length(unique(moduleResult[[j]], moduleResult[[i]])))>0.8) {
#moduleResultMerge[[count]] <- unique(c(moduleResult[[j]], moduleResult[[i]]))
overlapPair[[count]] <- c(i, j)
count <- count + 1
}
}
}
if (length(overlapPair)>0) {
for (i in 1:length(overlapPair)) {
start <- overlapPair[[i]][1]
end <- overlapPair[[i]][2]
moduleResult[[start]] <- unique(c(moduleResult[[start]], moduleResult[[end]]))
moduleResult[[end]] <- NULL
}
}
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
for (j in moduleResult[[i]]) {
if (length(moduleResult[[i]]) < minModuleGene) {next}
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
minModuleGene=5
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
for (j in moduleResult[[i]]) {
if (length(moduleResult[[i]]) < minModuleGene) {next}
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
moduleResultDf
table(moduleResultDf$module)
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
if (length(moduleResult[[i]]) < minModuleGene) {next}
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
table(moduleResultDf$module)
minModuleGene
moduleResultDf <- data.frame()
table(moduleResultDf$module)
for (i in 1:length(moduleResult)){
if (length(moduleResult[[i]]) < minModuleGene) {next}
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
table(moduleResultDf$module)
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
table(moduleResultDf$module)
moduleResult
count <- 1
overlapPair <- list()
for (i in 1:length(moduleResult)) {
for (j in 1:length(moduleResult)){
if (i >= j) {next}
if ((length(intersect(moduleResult[[j]], moduleResult[[i]]))/(length(min(moduleResult[[j]]), length(moduleResult[[i]]))))>0.8) {
#moduleResultMerge[[count]] <- unique(c(moduleResult[[j]], moduleResult[[i]]))
overlapPair[[count]] <- c(i, j)
count <- count + 1
}
}
}
count <- 1
overlapPair <- list()
for (i in 1:length(moduleResult)) {
for (j in 1:length(moduleResult)){
if (i >= j) {next}
if ((length(intersect(moduleResult[[j]], moduleResult[[i]]))/(min(length(moduleResult[[j]]), length(moduleResult[[i]]))))>0.8) {
#moduleResultMerge[[count]] <- unique(c(moduleResult[[j]], moduleResult[[i]]))
overlapPair[[count]] <- c(i, j)
count <- count + 1
}
}
}
overlapPair
i <- 1; j <- 2
(length(intersect(moduleResult[[j]], moduleResult[[i]]))
)
i <- 1; j <- 9
length(intersect(moduleResult[[j]], moduleResult[[i]]))
min(length(moduleResult[[j]]), length(moduleResult[[i]]))
9/12
count <- 1
overlapPair <- list()
for (i in 1:length(moduleResult)) {
for (j in 1:length(moduleResult)){
if (i >= j) {next}
if ((length(intersect(moduleResult[[j]], moduleResult[[i]]))/(min(length(moduleResult[[j]]), length(moduleResult[[i]]))))>0.5) {
#moduleResultMerge[[count]] <- unique(c(moduleResult[[j]], moduleResult[[i]]))
overlapPair[[count]] <- c(i, j)
count <- count + 1
}
}
}
overlapPair
moduleResult
if (length(overlapPair)>0) {
for (i in 1:length(overlapPair)) {
start <- overlapPair[[i]][1]
end <- overlapPair[[i]][2]
moduleResult[[start]] <- unique(c(moduleResult[[start]], moduleResult[[end]]))
moduleResult[[end]] <- NULL
}
}
overlapPair
moduleResult[[9]]
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
j <- j+1
genelist <- singleModuleDetectionSum(corM=corM, center=center, cutThresd=0.6, centerBlackList=centerBlackList, topCount=100)
if (length(intersect(genelist, centerBlackList)) > 0) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
centerBlackList <- unique(c(centerBlackList, genelist))
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
for (i in 1:length(moduleResultbak)) {
for (j in 1:length(moduleResult)){
if (length(intersect(moduleResult[[j]], moduleResultbak[[i]]))){
moduleResult[[j]] <- unique(c(moduleResult[[j]], moduleResultbak[[i]]))
}
}
}
# moduleResultMerge <- list()
count <- 1
overlapPair <- list()
for (i in 1:length(moduleResult)) {
for (j in 1:length(moduleResult)){
if (i >= j) {next}
if ((length(intersect(moduleResult[[j]], moduleResult[[i]]))/(min(length(moduleResult[[j]]), length(moduleResult[[i]]))))>0.5) {
#moduleResultMerge[[count]] <- unique(c(moduleResult[[j]], moduleResult[[i]]))
overlapPair[[count]] <- c(i, j)
count <- count + 1
}
}
}
overlapPair
moduleResult
if (length(overlapPair)>0) {
for (i in 1:length(overlapPair)) {
start <- overlapPair[[i]][1]
end <- overlapPair[[i]][2]
moduleResult[[start]] <- unique(c(moduleResult[[start]], moduleResult[[end]]))
}
for (i in 1:length(overlapPair)) {
end <- overlapPair[[i]][2]
moduleResult[[end]] <- NULL
}
}
moduleResult
moduleResultDf <- data.frame()
for (i in 1:length(moduleResult)){
if (length(moduleResult[[i]]) < minModuleGene) {next}
for (j in moduleResult[[i]]) {
moduleResultDf <- rbind(moduleResultDf, c(j, i))
}
}
colnames(moduleResultDf) <- c("gene", "module")
moduleResultDf <- moduleResultDf[!duplicated(moduleResultDf$gene),]
rownames(moduleResultDf) <- moduleResultDf$gene
table(moduleResultDf$module)
gene <- a
moduleResultDf[gene[gene%in%moduleResultDf$gene],]
gene <- b
moduleResultDf[gene[gene%in%moduleResultDf$gene],]
gene <- c
moduleResultDf[gene[gene%in%moduleResultDf$gene],]
gene <- d
moduleResultDf[gene[gene%in%moduleResultDf$gene],]
gene <- e
moduleResultDf[gene[gene%in%moduleResultDf$gene],]
cellOrderInference <- function(module=moduleResultDf[moduleResultDf$module=="1",]$gene){
# module <- moduleResult[[1]]
exprM <- logcounts(tmp_group)[module,]
# sign <- cor_matrix_spearman[module,module[1]] < 0
# exprM[sign,] <- exprM[sign,]*(-1)
cellOrder <- sort(colSums(exprM))
plot(cellOrder)
# pheatmap(logcounts(tmp_group)[moduleResult[[1]],names(cellOrder)], show_colnames = F, cluster_rows = T, cluster_cols = F)
return(names(cellOrder))
}
module=moduleResultDf[moduleResultDf$module=="1",]$gene
module
exprM <- logcounts(tmp_group)[module,]
# sign <- cor_matrix_spearman[module,module[1]] < 0
# exprM[sign,] <- exprM[sign,]*(-1)
cellOrder <- sort(colSums(exprM))
plot(cellOrder)
pdf('moduleResult.pdf')
library(pheatmap)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(module)
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F)
}
dev.off()
expr=exprZscore
exprM <- expr[module,]
exprM[1:5,1:5]
cellOrderInference <- function(expr=exprZscore, module=moduleResultDf[moduleResultDf$module=="1",]$gene){
# module <- moduleResult[[1]]
# exprM <- logcounts(tmp_group)[module,]
exprM <- expr[module,]
# sign <- cor_matrix_spearman[module,module[1]] < 0
# exprM[sign,] <- exprM[sign,]*(-1)
cellOrder <- sort(colSums(exprM))
plot(cellOrder)
# pheatmap(logcounts(tmp_group)[moduleResult[[1]],names(cellOrder)], show_colnames = F, cluster_rows = T, cluster_cols = F)
return(names(cellOrder))
}
pdf('moduleResult.pdf')
library(pheatmap)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(module)
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F)
}
dev.off()
pdf('moduleResult.pdf')
library(pheatmap)
for (i in unique(moduleResultDf$module)) {
# pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
module <- moduleResultDf[moduleResultDf$module==i,]$gene
cellOrder <- cellOrderInference(exprZscore, module)
pheatmap(expr[module,cellOrder], show_colnames = F, cluster_rows = T, cluster_cols = F)
}
dev.off()
