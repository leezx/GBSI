eps2 <- epsDetection(start=eps[1], end = eps[2], primary = F, fold = 1)
res <- dbscan(pcMatrix, eps = eps2, minPts = minPts)
# rownames(winePCAmethods@scores)[res$cluster==0]
pca <- as.data.frame(pcMatrix)
pca$cluster <- as.character(res$cluster)
if (plot) {ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point()}
return(pca)
}
outlierDetection()
outlierDetection <- function(M=logcounts(tmp_group), pcNum=100, method="prcomp", minPts=10, plot=T){
exprMatrix <- t(M)
exprMatrix <- exprMatrix[,colSums(exprMatrix)>0]
pcMatrix <- 0
start_time <- Sys.time()
if (method=="prcomp"){
prin_comp <- prcomp(exprMatrix, scale. = T, center = T)
pcMatrix <- prin_comp$x[,1:pcNum]
} else if (method=="pcaMethods"){
library(pcaMethods)
prin_comp <- pca(exprMatrix, scale = "uv", center = T, nPcs = pcNum, method = "svd")
pcMatrix <- prin_comp@scores[,1:pcNum]
}
end_time <- Sys.time()
print("matrix size: ")
print(dim(M))
print(paste("pcNum: ", pcNum, ",method: ", method))
print(end_time - start_time)
# return(pcMatrix)
eps <- epsDetection()
eps2 <- epsDetection(start=eps[1], end = eps[2], primary = F, fold = 1)
res <- dbscan(pcMatrix, eps = eps2, minPts = minPts)
# rownames(winePCAmethods@scores)[res$cluster==0]
pca <- as.data.frame(pcMatrix)
pca$cluster <- as.character(res$cluster)
if (plot) {
library(ggplot2)
ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point()}
return(pca)
}
outlierDetection()
outlierDetection <- function(M=logcounts(tmp_group), pcNum=100, method="prcomp", minPts=10, plot=T){
exprMatrix <- t(M)
exprMatrix <- exprMatrix[,colSums(exprMatrix)>0]
pcMatrix <- 0
start_time <- Sys.time()
if (method=="prcomp"){
prin_comp <- prcomp(exprMatrix, scale. = T, center = T)
pcMatrix <- prin_comp$x[,1:pcNum]
} else if (method=="pcaMethods"){
library(pcaMethods)
prin_comp <- pca(exprMatrix, scale = "uv", center = T, nPcs = pcNum, method = "svd")
pcMatrix <- prin_comp@scores[,1:pcNum]
}
end_time <- Sys.time()
print("matrix size: ")
print(dim(M))
print(paste("pcNum: ", pcNum, ",method: ", method))
print(end_time - start_time)
# return(pcMatrix)
eps <- epsDetection()
eps2 <- epsDetection(start=eps[1], end = eps[2], primary = F, fold = 1)
res <- dbscan(pcMatrix, eps = eps2, minPts = minPts)
# rownames(winePCAmethods@scores)[res$cluster==0]
pca <- as.data.frame(pcMatrix)
pca$cluster <- as.character(res$cluster)
if (plot) {
library(ggplot2)
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point())}
return(pca)
}
outlierDetection()
result <- outlierDetection()
table(result$cluster)
allnoiseCount
as.double(names(sort(allnoiseCount %% as.integer(percent*dim(pcMatrix)[1]))[1]))
percent=0.05
as.double(names(sort(allnoiseCount %% as.integer(percent*dim(pcMatrix)[1]))[1]))
start=1; end=100; fold=5; primary=T; minPts=10; percent=0.05; plot=T
library(dbscan)
if (primary==T){ by = 1 } else {by=(end-start)/100}
epsLevels <- (seq(start, end, by=by)-1)*fold
allnoiseCount <- c()
alleps <- c()
for ( eps in epsLevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
# minPts <- 10
res <- dbscan(pcMatrix, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount <- allnoiseCount[!is.na(allnoiseCount)]
allnoiseCount <- allnoiseCount[allnoiseCount!=dim(pcMatrix)[1]]
if (plot) {plot(allnoiseCount)}
allnoiseCount
epsDetection(pcMatrix)
eps <- epsDetection(pcMatrix)
start=eps[1]; end = eps[2]; primary = F; fold = 1
start
ecd
end
library(dbscan)
if (primary==T){ by = 1 } else {by=(end-start)/100}
epsLevels <- (seq(start, end, by=by)-1)*fold
allnoiseCount <- c()
alleps <- c()
for ( eps in epsLevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
# minPts <- 10
res <- dbscan(pcMatrix, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount <- allnoiseCount[!is.na(allnoiseCount)]
allnoiseCount <- allnoiseCount[allnoiseCount!=dim(pcMatrix)[1]]
if (plot) {plot(allnoiseCount)}
allnoiseCount
dim(mypcMatrix)
363*0.05
as.double(names(sort(allnoiseCount %% as.integer(percent*dim(pcMatrix)[1]))[1]))
sort(allnoiseCount %% as.integer(percent*dim(pcMatrix)
)
)
allnoiseCount
allnoiseCount %% as.integer(percent*dim(pcMatrix)[1]
)
allnoiseCount[allnoiseCount>=percent*dim(pcMatrix)]
allnoiseCount[allnoiseCount>=percent*dim(pcMatrix)[1]]
sort(allnoiseCount[allnoiseCount>=percent*dim(pcMatrix)[1]])
sort(allnoiseCount[allnoiseCount>=percent*dim(pcMatrix)[1]])[1]
as.double(sort(allnoiseCount[allnoiseCount>=percent*dim(pcMatrix)[1]])[1]))
as.double(sort(allnoiseCount[allnoiseCount>=percent*dim(pcMatrix)[1]])[1])
as.double(names(sort(allnoiseCount[allnoiseCount>=percent*dim(pcMatrix)[1]])[1])
)
epsDetection <- function(pcMatrix=mypcMatrix, start=1, end=100, fold=5, primary=T, minPts=10, percent=0.05, plot=T){
# DBSCAN
library(dbscan)
if (primary==T){ by = 1 } else {by=(end-start)/100}
epsLevels <- (seq(start, end, by=by)-1)*fold
allnoiseCount <- c()
alleps <- c()
for ( eps in epsLevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
# minPts <- 10
res <- dbscan(pcMatrix, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount <- allnoiseCount[!is.na(allnoiseCount)]
allnoiseCount <- allnoiseCount[allnoiseCount!=dim(pcMatrix)[1]]
if (plot) {plot(allnoiseCount)}
if (primary==T)
{return(c(as.integer(names(allnoiseCount)[1]), as.integer(names(allnoiseCount)[length(allnoiseCount)])))}
else {return(as.double(names(sort(allnoiseCount[allnoiseCount>=percent*dim(pcMatrix)[1]])[1])))}
# {return(as.double(names(sort(allnoiseCount %% as.integer(percent*dim(pcMatrix)[1]))[1])))}
}
outlierDetection <- function(M=logcounts(tmp_group), pcNum=100, method="prcomp", minPts=10, plot=T){
exprMatrix <- t(M)
exprMatrix <- exprMatrix[,colSums(exprMatrix)>0]
pcMatrix <- 0
start_time <- Sys.time()
if (method=="prcomp"){
prin_comp <- prcomp(exprMatrix, scale. = T, center = T)
pcMatrix <- prin_comp$x[,1:pcNum]
} else if (method=="pcaMethods"){
library(pcaMethods)
prin_comp <- pca(exprMatrix, scale = "uv", center = T, nPcs = pcNum, method = "svd")
pcMatrix <- prin_comp@scores[,1:pcNum]
}
end_time <- Sys.time()
print("matrix size: ")
print(dim(M))
print(paste("pcNum: ", pcNum, ",method: ", method))
print(end_time - start_time)
# return(pcMatrix)
eps <- epsDetection(pcMatrix)
eps2 <- epsDetection(pcMatrix, start=eps[1], end = eps[2], primary = F, fold = 1)
res <- dbscan(pcMatrix, eps = eps2, minPts = minPts)
# rownames(winePCAmethods@scores)[res$cluster==0]
pca <- as.data.frame(pcMatrix)
pca$cluster <- as.character(res$cluster)
if (plot) {
library(ggplot2)
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point())}
return(pca)
}
outlierDetection()
outlierDetection(, pcNum = 2)
library(dbscan)
if (primary==T){ by = 1 } else {by=(end-start)/100}
epsLevels <- (seq(start, end, by=by)-1)*fold
clusterCount <- c()
alleps <- c()
for ( eps in epsLevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
# minPts <- 10
res <- dbscan(pcMatrix, eps = eps, minPts = minPts)
clusterCount <- length(table(res$cluster))
allclusterCount <- c(allclusterCount, clusterCount)
}
names(allclusterCount) <- alleps
library(dbscan)
if (primary==T){ by = 1 } else {by=(end-start)/100}
epsLevels <- (seq(start, end, by=by)-1)*fold
allclusterCount <- c()
alleps <- c()
for ( eps in epsLevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
# minPts <- 10
res <- dbscan(pcMatrix, eps = eps, minPts = minPts)
clusterCount <- length(table(res$cluster))
allclusterCount <- c(allclusterCount, clusterCount)
}
names(allclusterCount) <- alleps
allclusterCount
epsLevels
res <- dbscan(pcMatrix, eps = 124.4, minPts = minPts)
res
start=1; end=100; fold=5; primary=T; minPts=10
library(dbscan)
if (primary==T){ by = 1 } else {by=(end-start)/100}
epsLevels <- (seq(start, end, by=by)-1)*fold
allclusterCount <- c()
alleps <- c()
for ( eps in epsLevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
# minPts <- 10
res <- dbscan(pcMatrix, eps = eps, minPts = minPts)
clusterCount <- length(table(res$cluster))
allclusterCount <- c(allclusterCount, clusterCount)
}
names(allclusterCount) <- alleps
allclusterCount
start=1; end=100; fold=5; primary=T; minPts=3
library(dbscan)
if (primary==T){ by = 1 } else {by=(end-start)/100}
epsLevels <- (seq(start, end, by=by)-1)*fold
allclusterCount <- c()
alleps <- c()
for ( eps in epsLevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
# minPts <- 10
res <- dbscan(pcMatrix, eps = eps, minPts = minPts)
clusterCount <- length(table(res$cluster))
allclusterCount <- c(allclusterCount, clusterCount)
}
names(allclusterCount) <- alleps
allclusterCount
res <- dbscan(pcMatrix, eps = 40, minPts = minPts)
res
pca <- as.data.frame(mypcMatrix)
pca$cluster <- as.character(res$cluster)
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point())}
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point())
start=35; end=45; fold=5; primary=F; minPts=3
library(dbscan)
if (primary==T){ by = 1 } else {by=(end-start)/100}
epsLevels <- (seq(start, end, by=by)-1)*fold
allclusterCount <- c()
alleps <- c()
for ( eps in epsLevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
# minPts <- 10
res <- dbscan(pcMatrix, eps = eps, minPts = minPts)
clusterCount <- length(table(res$cluster))
allclusterCount <- c(allclusterCount, clusterCount)
}
names(allclusterCount) <- alleps
allclusterCount
start=35; end=45; fold=1; primary=F; minPts=3
library(dbscan)
if (primary==T){ by = 1 } else {by=(end-start)/100}
epsLevels <- (seq(start, end, by=by)-1)*fold
allclusterCount <- c()
alleps <- c()
for ( eps in epsLevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
# minPts <- 10
res <- dbscan(pcMatrix, eps = eps, minPts = minPts)
clusterCount <- length(table(res$cluster))
allclusterCount <- c(allclusterCount, clusterCount)
}
names(allclusterCount) <- alleps
allclusterCount
res <- dbscan(pcMatrix, eps = 39, minPts = minPts)
res
pca$cluster <- as.character(res$cluster)
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point())
outlierDetection <- function(M=logcounts(tmp_group), pcNum=100, method="prcomp", minPts=10, plot=T){
exprMatrix <- t(M)
exprMatrix <- exprMatrix[,colSums(exprMatrix)>0]
pcMatrix <- 0
start_time <- Sys.time()
if (method=="prcomp"){
prin_comp <- prcomp(exprMatrix, scale. = T, center = T)
pcMatrix <- prin_comp$x[,1:pcNum]
} else if (method=="pcaMethods"){
library(pcaMethods)
prin_comp <- pca(exprMatrix, scale = "uv", center = T, nPcs = pcNum, method = "svd")
pcMatrix <- prin_comp@scores[,1:pcNum]
}
end_time <- Sys.time()
print("matrix size: ")
print(dim(M))
print(paste("pcNum: ", pcNum, ",method: ", method))
print(end_time - start_time)
# return(pcMatrix)
eps <- epsDetection(pcMatrix)
eps2 <- epsDetection(pcMatrix, start=eps[1], end = eps[2], primary = F, fold = 1)
res <- dbscan(pcMatrix, eps = eps2, minPts = minPts)
# rownames(winePCAmethods@scores)[res$cluster==0]
pca <- as.data.frame(pcMatrix)
pca$cluster <- as.character(res$cluster)
if (plot) {
library(ggplot2)
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point())}
return(pca)
}
result
result$cluster
table(result$cluster )
result <- outlierDetection()
result$cluster
table(result$cluster)
result
result[result$cluster!=0,]
head(logcounts(tmp_group))
tmp_group
tmp_group[,result$cluster!=0]
tmp_group <- tmp_group[,result$cluster!=0]
expr_log3 <- t(logcounts(tmp_group))
library(WGCNA)
cor_matrix_pearson <- WGCNA::cor(x = as.matrix((expr_log3)), method = "pearson")
hist(cor_matrix_pearson)
cor_matrix_spearman <- WGCNA::cor(x = as.matrix((expr_log3)), method = "spearman")
hist(cor_matrix_spearman)
dis_matrix_pearson2 <- 1 - abs(cor_matrix_pearson)
hist(dis_matrix_pearson2)
hist(dis_matrix_pearson2, breaks = 100)
pcMatrix=dis_matrix_pearson2; start=1; end=100; fold=5; primary=T; minPts=3; percent=0.05; plot=T
library(dbscan)
if (primary==T){ by = 1 } else {by=(end-start)/100}
epsLevels <- (seq(start, end, by=by)-1)*fold
allclusterCount <- c()
alleps <- c()
for ( eps in epsLevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
# minPts <- 10
res <- dbscan(pcMatrix, eps = eps, minPts = minPts)
clusterCount <- length(table(res$cluster))
allclusterCount <- c(allclusterCount, clusterCount)
}
names(allclusterCount) <- alleps
sum(is.na(dis_matrix_pearson2))
dis_matrix_pearson2[1:10,1:10]
?dbscan
res <- dbscan(as.matrix(t(pcMatrix)), eps = 1, minPts = 3)
res <- dbscan(as.dist(pcMatrix)), eps = 1, minPts = 3)
res <- dbscan(as.dist(pcMatrix), eps = 1, minPts = 3)
dim(dis_matrix_pearson2)
sum(is.na(dis_matrix_pearson2))
14572*14572
corMatrix=dis_matrix_pearson2
library(dbscan)
corMatrix[is.na(corMatrix)] <- 1
if (primary==T){ by = 1 } else {by=(end-start)/100}
epsLevels <- (seq(start, end, by=by)-1)*fold
allclusterCount <- c()
alleps <- c()
for ( eps in epsLevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
# minPts <- 10
res <- dbscan(as.dist(corMatrix), eps = eps, minPts = minPts)
clusterCount <- length(table(res$cluster))
allclusterCount <- c(allclusterCount, clusterCount)
}
res <- dbscan(as.dist(corMatrix), eps = eps, minPts = minPts)
res <- dbscan(corMatrixDis, eps = 1, minPts = 6)
corMatrixDis <- as.dist(corMatrix)
res <- dbscan(corMatrixDis, eps = 1, minPts = 6)
corMatrixDis[1:5,1:5]
corMatrix[1:5,1:5]
class(corMatrix)
round(corMatrix,3)[1:5,1:5]
dis_matrix_pearson2 <- round(dis_matrix_pearson2,3)
dis_matrix_pearson2[1:5,1:5]
corMatrix=dis_matrix_pearson2
corMatrix[is.na(corMatrix)] <- 1
corMatrixDis <- as.dist(corMatrix)
corMatrix[1:5,1:5]
res <- dbscan(corMatrixDis, eps = 1, minPts = 5)
iris2 <- iris[,1:4]
iris2
kmeans.result <- kmeans(iris2, centers=3)
?kmeans
kmeans.result$centers
?dbscan
dis_matrix_pearson2 <- 1 - abs(cor_matrix_pearson)
dis_all <- c()
for (i in length(dis_matrix_pearson2)){
for (j in length(dis_matrix_pearson2))
if (i > j) {
dis_all <- c(dis_all, dis_matrix_pearson2[i,j])
}
}
dis_all <- c()
for (i in 1:length(dis_matrix_pearson2)){
for (j in 1:length(dis_matrix_pearson2))
if (i > j) {
dis_all <- c(dis_all, dis_matrix_pearson2[i,j])
}
}
1:dim(dis_matrix_pearson2)[1]
dis_all <- c()
for (i in 1:dim(dis_matrix_pearson2)[1]){
for (j in 1:dim(dis_matrix_pearson2)[2])
if (i > j) {
dis_all <- c(dis_all, dis_matrix_pearson2[i,j])
}
}
nrow(dis_matrix_pearson2)
row(dis_matrix_pearson2)
dis_matrix_pearson2[row(dis_matrix_pearson2)>col(dis_matrix_pearson2])
dis_matrix_pearson2[row(dis_matrix_pearson2)>col(dis_matrix_pearson2)]
test <- dis_matrix_pearson2[1:10,1:10]
test
test[row(test)>col(test)]
test <- dis_matrix_pearson2[row(dis_matrix_pearson2)>col(dis_matrix_pearson2)]
length(test)
hist(test)
quantile(test)
quantile(test, na.rm = T)
?quantile
quantile(test, na.rm = T, probs = seq(0, 1, 0.05))
quantile(test, na.rm = T, probs = seq(0, 1, 0.01))
apply(test, 1, max) >= 0.9343107
apply(test, 1, max)
?parDist
library(parallelDist)
?parDist
dis_all <- c()
for (i in 1:dim(dis_matrix_pearson2)[1]){
for (j in 1:dim(dis_matrix_pearson2)[2])
if (i > j) {
dis_all <- c(dis_all, dis_matrix_pearson2[i,j])
} else if (i == j) {
dis_matrix_pearson2[i,j] <- 1
}
}
dis_matrix_pearson2 <- 1 - abs(cor_matrix_pearson)
dis_matrix_pearson2[1:5,1:5]
dis_matrix_pearson3 <- as.dist(dis_matrix_pearson2)
?hclust
hc <- fastcluster::hclust(dis_matrix_pearson3, method="average")
hc <- fastcluster::hclust(dis_matrix_pearson3, method="average", rm.na=T)
hc <- fastcluster::hclust(dis_matrix_pearson3, method="average", na.rm=T)
hc <- hclust(dis_matrix_pearson3, method="average", na.rm=T)
hc <- hclust(dis_matrix_pearson3, method="average")
dis_matrix_pearson3
head(dis_matrix_pearson3)
dis_matrix_pearson2[is.na(dis_matrix_pearson2)] <- 1
dis_matrix_pearson3 <- as.dist(dis_matrix_pearson2)
hc <- fastcluster::hclust(dis_matrix_pearson3, method="average")
groups<-cutree(hc, h=0.7)
0:100
(0:100)/100
groups
marker_result <- data.frame(gene=names(groups),cluster=as.vector(groups),row.names = names(groups))
marker_result
filter_cluster <- names(table(marker_result$cluster))[table(marker_result$cluster)>=5]
filter_cluster
marker_result <- marker_result[marker_result$cluster%in%filter_cluster,]
marker_result
groups
table(groups)
table(groups)>=5
sum(table(groups)>=5)
clusterNum <- c()
for i in (0:100){
groups<-cutree(hc, h=(i/100))
clusterNum <- c(clusterNum, sum(table(groups)>=5))
#marker_result <- data.frame(gene=names(groups),cluster=as.vector(groups),row.names = names(groups))
#filter_cluster <- names(table(marker_result$cluster))[table(marker_result$cluster)>=5]
#marker_result <- marker_result[marker_result$cluster%in%filter_cluster,]
#plot_markers <- marker_result[marker_result$cluster==4,]
#plot_markers <- plot_markers[plot_markers$gene%in%rownames(tmp_group),]
}
clusterNum <- c()
for (i in 0:100){
groups<-cutree(hc, h=(i/100))
clusterNum <- c(clusterNum, sum(table(groups)>=5))
#marker_result <- data.frame(gene=names(groups),cluster=as.vector(groups),row.names = names(groups))
#filter_cluster <- names(table(marker_result$cluster))[table(marker_result$cluster)>=5]
#marker_result <- marker_result[marker_result$cluster%in%filter_cluster,]
#plot_markers <- marker_result[marker_result$cluster==4,]
#plot_markers <- plot_markers[plot_markers$gene%in%rownames(tmp_group),]
}
clusterNum
plot(clusterNum)
