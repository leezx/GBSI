marker_result <- marker_result[marker_result$cluster!=0,]
marker_result$cluster <- as.integer(as.factor(marker_result$cluster))
marker_result
table(marker_result$cluster)
corM=dis_matrix_pearson2
moduleResult <- list()
count <- 1
count2 <- 0
j <- 0
totalCount <- dim(corM)[1]
centerBlackList <- c()
#for (i in 1:length(table(marker_result$cluster))) {
for (center in rownames(corM)) {
#geneCluster <- marker_result[marker_result$cluster==i,]$gene
#center <- centerDetection(corM, geneCluster)
count2 <- count2 + 1
if (count2%%as.integer(totalCount/10)==0){
j <- j+1
print(paste(j*10, "percent was finished..."))}
# center <- i
# print(center)
result1 <- singleModuleDetection(corM=corM, overlapM=geneOverlap, center=center, centerBlackList=centerBlackList, topCount=100)
genelist <- result1[["genelist"]]
centerBlackList1 <- result1[["centerBlackList"]]
result2 <- moduleShift(corM, genelist, centerBlackList=centerBlackList1)
genelist <- result2[["genelist"]]
centerBlackList2 <- result2[["centerBlackList"]]
tempCenter <- centerDetection(corM, genelist)
if (tempCenter%in%centerBlackList) {
# print(paste(tempCenter, "is duplicated center!", sep=" "))
next}
centerBlackList <- c(centerBlackList, centerBlackList2)
# print(genelist)
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
table(marker_result$cluster)
min(table(marker_result$cluster))
moduleResult
moduleResult2 <- moduleResult
pdf('moduleResult.pdf')
for (i in 1:length(moduleResult)){
pheatmap(logcounts(tmp_group)[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
}
dev.off()
library(pheatmap)
pdf('moduleResult.pdf')
for (i in 1:length(moduleResult)){
pheatmap(logcounts(tmp_group)[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
}
dev.off()
moduleResult <- list()
count <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(table(marker_result$cluster))
for (i in 1:totalLength) {
#for (center in rownames(corM)) {
geneCluster <- marker_result[marker_result$cluster==i,]$gene
center <- centerDetection(corM, geneCluster)
#count2 <- count2 + 1
#if (count2%%as.integer(totalCount/10)==0){
#  j <- j+1
print(paste(j, "of", totalLength, "was finished..."))}
# center <- i
# print(center)
result1 <- singleModuleDetection(corM=corM, overlapM=geneOverlap, center=center, centerBlackList=centerBlackList, topCount=100)
genelist <- result1[["genelist"]]
centerBlackList1 <- result1[["centerBlackList"]]
result2 <- moduleShift(corM, genelist, centerBlackList=centerBlackList1)
genelist <- result2[["genelist"]]
centerBlackList2 <- result2[["centerBlackList"]]
tempCenter <- centerDetection(corM, genelist)
if (tempCenter%in%centerBlackList) {
# print(paste(tempCenter, "is duplicated center!", sep=" "))
next}
centerBlackList <- c(centerBlackList, centerBlackList2)
# print(genelist)
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
moduleResult <- list()
count <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(table(marker_result$cluster))
for (i in 1:totalLength) {
#for (center in rownames(corM)) {
geneCluster <- marker_result[marker_result$cluster==i,]$gene
center <- centerDetection(corM, geneCluster)
#count2 <- count2 + 1
#if (count2%%as.integer(totalCount/10)==0){
j <- j+1
print(paste(j, "of", totalLength, "was finished..."))
# center <- i
# print(center)
result1 <- singleModuleDetection(corM=corM, overlapM=geneOverlap, center=center, centerBlackList=centerBlackList, topCount=100)
genelist <- result1[["genelist"]]
centerBlackList1 <- result1[["centerBlackList"]]
result2 <- moduleShift(corM, genelist, centerBlackList=centerBlackList1)
genelist <- result2[["genelist"]]
centerBlackList2 <- result2[["centerBlackList"]]
tempCenter <- centerDetection(corM, genelist)
if (tempCenter%in%centerBlackList) {
# print(paste(tempCenter, "is duplicated center!", sep=" "))
next}
centerBlackList <- c(centerBlackList, centerBlackList2)
# print(genelist)
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
moduleResult
pdf('moduleResult2.pdf')
for (i in 1:length(moduleResult)){
pheatmap(logcounts(tmp_group)[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
}
dev.off()
moduleResult <- list()
count <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(table(marker_result$cluster))
totalLength
i <- 1
geneCluster <- marker_result[marker_result$cluster==i,]$gene
geneCluster
center <- centerDetection(corM, geneCluster)
center
j <- j+1
print(paste(j, "of", totalLength, "was finished..."))
result1 <- singleModuleDetection(corM=corM, overlapM=geneOverlap, center=center, centerBlackList=centerBlackList, topCount=100)
result1
dis_matrix_pearson2[1:5,1:5]
dis_matrix_pearson2["CLDN6",]
hist(dis_matrix_pearson2["CLDN6",])
hist(dis_matrix_pearson2["CD24",])
hist(dis_matrix_pearson2["CLDN6",])
hist(dis_matrix_pearson2["CD24",])
hist(dis_matrix_pearson2["MDK",])
hist(dis_matrix_pearson2["HAT1",])
hist(dis_matrix_pearson2["SGO1",])
dis_matrix_pearson2[1:5,1:5]
rowSums(dis_matrix_pearson2>0.1)
rowSums(dis_matrix_pearson2<0.1)
seq(0,0.5,by=0.05)
seq(0.05,0.5,by=0.05)
densityDf <- data.frame()
densityDf
as.character(0.05)
densityDf <- data.frame()
for (i in seq(0.05,0.6,by=0.05)){
densityDf$as.character(i) <- rowSums(dis_matrix_pearson2<i)
}
rowSums(dis_matrix_pearson2 < i)
densityDf <- data.frame()
for (i in seq(0.05,0.6,by=0.05)){
densityDf <- cbind(densityDf, rowSums(dis_matrix_pearson2<i))
}
densityDf <- data.frame(row.names=rownames(dis_matrix_pearson2))
densityDf
for (i in seq(0.05,0.6,by=0.05)){
densityDf <- cbind(densityDf, rowSums(dis_matrix_pearson2<i))
}
densityDf
as.character(seq(0.05,0.6,by=0.05))
colnames(densityDf) <- as.character(seq(0.05,0.6,by=0.05))
densityDf
(densityDf > 0)
rowSums(densityDf > 0)
sort(rowSums(densityDf > 0))
names(sort(rowSums(densityDf > 0)))
densityDf <- densityDf[names(sort(rowSums(densityDf > 0))),]
densityDf
densityDf <- densityDf[names(sort(rowSums(densityDf > 0), decreasing = T)),]
densityDf
View(densityDf)
densityDf <- densityDf[names(sort(rowSums(densityDf), decreasing = T)),]
densityDf
densityDf <- densityDf[names(sort(rowSums(densityDf > 0), decreasing = T)),]
densityDf
View(densityDf)
geneOverlap[1:5,1:5]
apply(geneOverlap, 2, min)
apply(geneOverlap, 2, max)
use.gene <- rownames(geneOverlap)[apply(geneOverlap, 2, max) >= 5]
use.gene
dim(dis_matrix_pearson2)
dis_matrix_pearson2 <- 1 - abs(cor_matrix_spearman)
dis_matrix_pearson2[is.na(dis_matrix_pearson2)] <- 1
dis_matrix_pearson2[row(dis_matrix_pearson2)==col(dis_matrix_pearson2)] <- 1
minPerRow <- apply(dis_matrix_pearson2, 2, min)
corThresd <- quantile(minPerRow, probs = seq(0, 1, 0.25))[2]
dis_matrix_pearson2 <- dis_matrix_pearson2[use.gene, use.gene]
minPerRow <- apply(dis_matrix_pearson2, 2, min)
corThresd <- quantile(minPerRow, probs = seq(0, 1, 0.25))[2]
dis_matrix_pearson2 <- dis_matrix_pearson2[names(minPerRow[minPerRow < corThresd]),names(minPerRow[minPerRow < corThresd])]
dis_matrix_pearson3 <- as.dist(dis_matrix_pearson2)
densityDf <- data.frame(row.names=rownames(dis_matrix_pearson2))
for (i in seq(0.05,0.6,by=0.05)){
densityDf <- cbind(densityDf, rowSums(dis_matrix_pearson2<i))
}
colnames(densityDf) <- as.character(seq(0.05,0.6,by=0.05))
densityDf <- densityDf[names(sort(rowSums(densityDf), decreasing = T)),]
densityDf <- densityDf[names(sort(rowSums(densityDf > 0), decreasing = T)),]
densityDf$`0.6` > 5
densityDf <- densityDf[densityDf$`0.6` > 5,]
densityDf <- densityDf[names(sort(rowSums(densityDf), decreasing = T)),]
densityDf <- densityDf[names(sort(rowSums(densityDf > 0), decreasing = T)),]
densityDf
dim(dis_matrix_pearson2)
densityDf
rownames(densityDf)
tail(densityDf)
dis_matrix_pearson2[1:5,1:5]
corM=dis_matrix_pearson2
center <- "CLDN6"
genelist <- c(center)
corM[genelist,!colnames(corM)%in%genelist]
sort(corM[center,!colnames(corM)%in%genelist])[1]
nearestGeneV <- sort(corM[center,!colnames(corM)%in%genelist])[1]
nearestGene <- names(nearestGeneV)
nearestGene
nearestGeneV > corThresd
genelist <- c(genelist, nearestGene)
genelist
centerBlackList=c(centerBlackList, center)
centerBlackList
corM[genelist,!colnames(corM)%in%genelist]
dim(corM[genelist,!colnames(corM)%in%genelist])
colSums(corM[genelist,!colnames(corM)%in%genelist])
sort(colSums(corM[genelist,!colnames(corM)%in%genelist]))[1]
corM[genelist,!colnames(corM)%in%genelist]
corM[genelist,!colnames(corM)%in%genelist]
nearestGeneV <- sort(colSums(corM[genelist,!colnames(corM)%in%genelist]))[1]
nearestGene <- names(nearestGeneV)
corM[nearestGene,!colnames(corM)%in%genelist]
corM[genelist,nearestGene]
min(corM[genelist,nearestGene])
nearestGene
singleModuleDetectionSum <- function(corM=dis_matrix_pearson2, overlapM=geneOverlap, center=center, topCount=100, corThresd=0.5, overlapThresd=3, centerBlackList=c()){
genelist <- c(center)
centerBlackList=c(centerBlackList, center)
while (length(genelist) < topCount) {
if (length(genelist)==1){
nearestGeneV <- sort(corM[center,!colnames(corM)%in%genelist])[1]
nearestGene <- names(nearestGeneV)
if (nearestGeneV > corThresd) {return(genelist)}
} else if (length(genelist)>1) {
nearestGeneV <- sort(colSums(corM[genelist,!colnames(corM)%in%genelist]))[1]
nearestGene <- names(nearestGeneV)
if (min(corM[genelist,nearestGene]) > corThresd) {return(genelist)}
}
# centerBlackList=c(centerBlackList, nearestGene)
genelist <- c(genelist, nearestGene)
# center <- centerDetection(corM, genelist)
# print(paste("nearestGene is: ", nearestGene, ", new center is: ", center, sep=" "))
}
# genelist <- moduleShift(corM, genelist)
# pheatmap(logcounts(tmp_group)[genelist,], show_colnames = F, cluster_rows = F)
# return(list(genelist=genelist, centerBlackList=unique(centerBlackList)))
return(genelist)
}
center
singleModuleDetectionSum()
singleModuleDetectionSum(corM=dis_matrix_pearson2, center = center)
a <- singleModuleDetectionSum(corM=dis_matrix_pearson2, center = center)
pheatmap(logcounts(tmp_group)[a,], show_colnames = F, cluster_rows = T)
densityDf
rownames(densityDf)
a
result1 <- singleModuleDetectionSum(corM=corM, overlapM=geneOverlap, center=center, centerBlackList=centerBlackList, topCount=100)
result1
corM=dis_matrix_pearson2
localCenters=rownames(densityDf)
moduleResult <- list()
count <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
# geneCluster <- marker_result[marker_result$cluster==i,]$gene
# center <- centerDetection(corM, geneCluster)
#count2 <- count2 + 1
#if (count2%%as.integer(totalCount/10)==0){
j <- j+1
# print(paste(j, "of", totalLength, "was finished..."))
# center <- i
# print(center)
genelist <- singleModuleDetectionSum(corM=corM, overlapM=geneOverlap, center=center, centerBlackList=centerBlackList, topCount=100)
# genelist <- result1
centerBlackList <- c(centerBlackList, genelist)
# result2 <- moduleShift(corM, genelist, centerBlackList=centerBlackList1)
#genelist <- result2[["genelist"]]
#centerBlackList2 <- result2[["centerBlackList"]]
#tempCenter <- centerDetection(corM, genelist)
#centerBlackList <- c(centerBlackList, centerBlackList2)
# print(genelist)
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
moduleResult
pheatmap(logcounts(tmp_group)[moduleResult[[1]],], show_colnames = F, cluster_rows = T)
pheatmap(logcounts(tmp_group)[moduleResult[[2]],], show_colnames = F, cluster_rows = T)
pheatmap(logcounts(tmp_group)[moduleResult[[3]],], show_colnames = F, cluster_rows = T)
pheatmap(logcounts(tmp_group)[moduleResult[[4]],], show_colnames = F, cluster_rows = T)
pheatmap(logcounts(tmp_group)[moduleResult[[5]],], show_colnames = F, cluster_rows = T)
centerBlackList
unique(centerBlackList)
pheatmap(logcounts(tmp_group)[moduleResult[[5]],], show_colnames = F, cluster_rows = T)
intersect(moduleResult[[5]],moduleResult[[1]])
moduleResult[[1]]
singleModuleDetectionSum <- function(corM=dis_matrix_pearson2, overlapM=geneOverlap, center=center, topCount=100, corThresd=0.5, overlapThresd=3, centerBlackList=c()){
genelist <- c(center)
centerBlackList=c(centerBlackList, center)
while (length(genelist) < topCount) {
if (length(genelist)==1){
nearestGeneV <- sort(corM[center,!colnames(corM)%in%genelist])[1]
nearestGene <- names(nearestGeneV)
if (nearestGeneV > corThresd) {return(genelist)}
} else if (length(genelist)>1) {
nearestGeneV <- sort(colSums(corM[genelist,!colnames(corM)%in%genelist]))[1]
nearestGene <- names(nearestGeneV)
if (min(corM[genelist,nearestGene]) > corThresd) {return(genelist)}
}
# centerBlackList=c(centerBlackList, nearestGene)
genelist <- c(genelist, nearestGene)
if (nearestGene %in% centerBlackList) {
print("nearestGene %in% centerBlackList")
return(genelist)
next
}
# center <- centerDetection(corM, genelist)
# print(paste("nearestGene is: ", nearestGene, ", new center is: ", center, sep=" "))
}
# genelist <- moduleShift(corM, genelist)
# pheatmap(logcounts(tmp_group)[genelist,], show_colnames = F, cluster_rows = F)
# return(list(genelist=genelist, centerBlackList=unique(centerBlackList)))
return(genelist)
}
center
center <- "CLDN6"
genelist <- singleModuleDetectionSum(corM=corM, overlapM=geneOverlap, center=center, centerBlackList=centerBlackList, topCount=100)
genelist
centerBlackList
centerBlackList <- c()
genelist <- singleModuleDetectionSum(corM=corM, overlapM=geneOverlap, center=center, centerBlackList=centerBlackList, topCount=100)
genelist
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
# geneCluster <- marker_result[marker_result$cluster==i,]$gene
# center <- centerDetection(corM, geneCluster)
#count2 <- count2 + 1
#if (count2%%as.integer(totalCount/10)==0){
j <- j+1
# print(paste(j, "of", totalLength, "was finished..."))
# center <- i
# print(center)
genelist <- singleModuleDetectionSum(corM=corM, overlapM=geneOverlap, center=center, centerBlackList=centerBlackList, topCount=100)
if (genelist %in% centerBlackList) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
# genelist <- result1
centerBlackList <- unique(c(centerBlackList, genelist))
# result2 <- moduleShift(corM, genelist, centerBlackList=centerBlackList1)
#genelist <- result2[["genelist"]]
#centerBlackList2 <- result2[["centerBlackList"]]
#tempCenter <- centerDetection(corM, genelist)
#centerBlackList <- c(centerBlackList, centerBlackList2)
# print(genelist)
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
moduleResultbak
warnings()
intersect
moduleResult <- list()
moduleResultbak <- list()
count <- 1
count2 <- 1
#count2 <- 0
j <- 0
#totalCount <- dim(corM)[1]
centerBlackList <- c()
totalLength <- length(localCenters)
# for (i in 1:totalLength) {
for (center in localCenters) {
if (center%in%centerBlackList) {
print(paste(center, "is duplicated center!", sep=" "))
next}
# geneCluster <- marker_result[marker_result$cluster==i,]$gene
# center <- centerDetection(corM, geneCluster)
#count2 <- count2 + 1
#if (count2%%as.integer(totalCount/10)==0){
j <- j+1
# print(paste(j, "of", totalLength, "was finished..."))
# center <- i
# print(center)
genelist <- singleModuleDetectionSum(corM=corM, overlapM=geneOverlap, center=center, centerBlackList=centerBlackList, topCount=100)
if (length(intersect(genelist, centerBlackList)) > 0) {
moduleResultbak[[count2]] <- genelist
count2 <- count2 + 1
next
}
# genelist <- result1
centerBlackList <- unique(c(centerBlackList, genelist))
# result2 <- moduleShift(corM, genelist, centerBlackList=centerBlackList1)
#genelist <- result2[["genelist"]]
#centerBlackList2 <- result2[["centerBlackList"]]
#tempCenter <- centerDetection(corM, genelist)
#centerBlackList <- c(centerBlackList, centerBlackList2)
# print(genelist)
if (length(genelist) >= 5){
moduleResult[[count]] <- genelist
count <- count + 1
}
}
moduleResult
moduleResultbak
pdf('moduleResult.pdf')
for (i in 1:length(moduleResult)){
pheatmap(logcounts(tmp_group)[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
}
dev.off()
moduleResult
moduleResult[[6]]
corM[moduleResult[[6]],moduleResult[[6]]]
expr <- logcounts(tmp_group)
apply(expr, 1, mean)
expr[1:5,1:5]
(expr-apply(expr, 1, mean))[1:5,1:5]
(expr-apply(expr, 1, mean))/apply(expr, 1, sd)[1:5,1:5]
((expr-apply(expr, 1, mean))/apply(expr, 1, sd))[1:5,1:5]
exprZscore <- (expr-apply(expr, 1, mean))/apply(expr, 1, sd)
for (i in 1:length(moduleResult)){
pheatmap(exprZscore[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
}
dev.off()
pdf('moduleResult.pdf')
expr <- logcounts(tmp_group)
exprZscore <- (expr-apply(expr, 1, mean))/apply(expr, 1, sd)
for (i in 1:length(moduleResult)){
pheatmap(exprZscore[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
}
dev.off()
moduleResult
moduleResultbak
for (i in 1:length(moduleResultbak)) {
for (j in 1:length(moduleResult)){
if (length(intersect(moduleResult[[j]], moduleResultbak[[i]]))){
moduleResult[[j]] <- unique(moduleResult[[j]], moduleResultbak[[i]])
}
}
}
moduleResult
for (i in 1:length(moduleResultbak)) {
for (j in 1:length(moduleResult)){
if (length(intersect(moduleResult[[j]], moduleResultbak[[i]]))){
moduleResult[[j]] <- unique(c(moduleResult[[j]], moduleResultbak[[i]]))
}
}
}
moduleResult
pdf('moduleResult.pdf')
expr <- logcounts(tmp_group)
exprZscore <- (expr-apply(expr, 1, mean))/apply(expr, 1, sd)
for (i in 1:length(moduleResult)){
pheatmap(exprZscore[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
}
dev.off()
pdf('moduleResult.pdf')
expr <- logcounts(tmp_group)
exprZscore <- (expr-apply(expr, 1, mean))/apply(expr, 1, sd)
for (i in 1:length(moduleResult)){
pheatmap(expr[moduleResult[[i]],], show_colnames = F, cluster_rows = T)
}
dev.off()
