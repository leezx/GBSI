cor_matrix_spearman <- WGCNA::cor(x = as.matrix((expr_log3)), method = "spearman")
# cor_matrix_kendall <- WGCNA::cor(x = as.matrix((expr_log3)), method = "kendall") # too slow
pheatmap(cor_matrix_pearson, cluster_rows = F, cluster_cols = F, show_rownames = T, show_colnames = T)
pheatmap(cor_matrix_spearman, cluster_rows = F, cluster_cols = F, show_rownames = T, show_colnames = T)
install.packages("mvoutlier")
library(mvoutlier)
data(bsstop)
x=bsstop[,5:14]
# identify multivariate outliers
x.out=pcout(x,makeplot=FALSE)
# visualize multivariate outliers in the map
op <- par(mfrow=c(1,2))
data(bss.background)
pbb(asp=1)
points(bsstop$XCOO,bsstop$YCOO,pch=16,col=x.out$wfinal01+2)
title("Outlier detection based on pcout")
legend("topleft",legend=c("potential outliers","regular observations"),pch=16,col=c(2,3))
# compare with outlier detection based on MCD:
x.mcd <- robustbase::covMcd(x)
pbb(asp=1)
points(bsstop$XCOO,bsstop$YCOO,pch=16,col=x.mcd$mcd.wt+2)
title("Outlier detection based on MCD")
legend("topleft",legend=c("potential outliers","regular observations"),pch=16,col=c(2,3))
par(op)
bsstop
x
x.out$wfinal01
table(x.out$wfinal01)
table(x.out$wfinal)
x.out$wloc
x.out$x.dist1
x.out$x.dist2
x.out$M1
x.out$const1
simulate_data <- function(logExpr=10, ngene=10, ncell=10, show_matrix=T, show_name=T){
ideal_matrix <- as.data.frame(matrix(rep(logExpr,ngene*ncell), nrow=ngene, ncol=ncell))
rownames(ideal_matrix) <- ((ngene*0+1):(ngene*1))
colnames(ideal_matrix) <- ((ncell*0+1):(ncell*1))
ideal_matrix$name <- rownames(ideal_matrix)
level_matrix <- as.data.frame(matrix(rep(logExpr,ngene*ncell), nrow=ngene, ncol=ncell)/sqrt(seq(1:ngene)))
rownames(level_matrix) <- ((ngene*1+1):(ngene*2))
colnames(level_matrix) <- ((ncell*1+1):(ncell*2))
level_matrix$name <- rownames(level_matrix)
level_matrix2 <- as.data.frame(t(t(as.data.frame(matrix(rep(logExpr,ngene*ncell), nrow=ngene, ncol=ncell)))/sqrt(seq(1:ncell))))
rownames(level_matrix2) <- ((ngene*2+1):(ngene*3))
colnames(level_matrix2) <- ((ncell*2+1):(ncell*3))
level_matrix2$name <- rownames(level_matrix2)
noise_matrix <- as.data.frame(matrix(rep(logExpr,ngene*ncell), nrow=ngene, ncol=ncell))
rownames(noise_matrix) <- ((ngene*3+1):(ngene*4))
colnames(noise_matrix) <- ((ncell*3+1):(ncell*4))
noise_matrix$name <- rownames(noise_matrix)
ideal_matrix2 <- as.data.frame(matrix(rep(0,ngene*ncell), nrow=ngene, ncol=ncell))
rownames(ideal_matrix2) <- ((ngene*4+1):(ngene*5))
colnames(ideal_matrix2) <- ((ncell*4+1):(ncell*5))
ideal_matrix2$name <- rownames(ideal_matrix2)
ideal_matrix3 <- as.data.frame(matrix(rep(logExpr,ngene*ncell), nrow=ngene, ncol=ncell))
rownames(ideal_matrix3) <- ((ngene*5+1):(ngene*6))
colnames(ideal_matrix3) <- ((ncell*5+1):(ncell*6))
ideal_matrix3$name <- rownames(ideal_matrix3)
total_matrix <- merge(merge(ideal_matrix, level_matrix,  by="name", all = T), level_matrix2, by="name", all=T)
total_matrix <- merge(total_matrix, noise_matrix, by="name", all=T)
total_matrix <- merge(total_matrix, ideal_matrix2, by="name", all=T)
total_matrix <- merge(total_matrix, ideal_matrix3, by="name", all=T)
total_matrix[is.na(total_matrix)] <- 0
total_matrix <- total_matrix[order(as.numeric(total_matrix$name)),]
rownames(total_matrix) <- paste("gene",total_matrix$name, sep="_")
colnames(total_matrix) <- paste("cell",colnames(total_matrix), sep="_")
total_matrix2 <- total_matrix
total_matrix2$cell_name <- NULL
# count <- ncell
for (onegene in ((ngene*3+1):(ngene*4))){
cell.no <- as.integer(runif(1, 0, ncell*3/3))
#inside.no <- as.integer(runif(1, 0, cell.no))
#outcell <- sample(((ncell*0+1):(ncell*2)), ncell-count)
outcell <- sample(1:(6*ncell), cell.no)
#incell <- sample(((ncell*2+1):(ncell*3)), ncell-count)
#total_matrix2[onegene, incell] <- runif(1, 0, logExpr)
total_matrix2[onegene, outcell] <- runif(1, 0, logExpr)
#count <- count - 1
#if (count <= 0) {count <- ncell}
}
total_matrix2[((ngene*4+1):(ngene*5)),(ncell*4-as.integer((ncell)/2)):((ncell*4-as.integer((ncell)/2))+ncell-1)] <- logExpr
total_matrix2[((ngene*5+1):(ngene*6)),(ncell*4+1):(ncell*6)] <- logExpr
if (show_matrix){
library(pheatmap)
pheatmap(total_matrix2, cluster_rows = F, cluster_cols = F, show_rownames = show_name, show_colnames = show_name)
}
return(total_matrix2)
}
simulate_data()
t(simulate_data())
x.out=pcout(t(simulate_data()),makeplot=FALSE)
x
class(x)
x.out=pcout(as.data.frame(t(simulate_data())),makeplot=FALSE)
expr_log3 <- t(simulate_data())
# expr_log3 <- t(simulate_data(10,100,50,show_name = F))
# add outlier
expr_log3 <- rbind(expr_log3, full=rep(c(19,20),30), empty=rep(c(0,1),30))
x.out=pcout(expr_log3,makeplot=FALSE)
expr_log3
pheatmap(t(expr_log3), cluster_rows = F, cluster_cols = F)
x.out=pcout(x,makeplot=T)
?png
x.out$wloc
x.out$x.dist1
hist(x.out$x.dist1)
x.out$x.dist1
dim(x)
?pcout
pcout
?mad
?scd
?svd
cumsum
?cumsum
?diag
dim(diag(3))
diag(3)
?qchisq
?mad
?svd
ï¼Ÿcumsum
?cumsum
?diag
?qchisq
dchisq(1, df = 1:3)
qchisq(1, df = 1:3)
qchisq(10, df = 1:3)
qchisq(0.5, df = 1:3)
?scale
(xy <- cbind(x = 1:10, y = c(1:3, 8:5, 8:10)))
w1 <- c(0,0,0,1,1,1,1,1,0,0)
cov.wt(xy, wt = w1) # i.e. method = "unbiased"
cov.wt(xy, wt = w1, method = "ML", cor = TRUE)
library(scater)
data("sc_example_counts")
data("sc_example_cell_info")
example_sce <- SingleCellExperiment(
assays = list(counts = sc_example_counts),
colData = sc_example_cell_info
)
example_sce <- calculateQCMetrics(example_sce)
## with a set of feature controls defined
example_sce <- calculateQCMetrics(example_sce,
feature_controls = list(set1 = 1:40))
isOutlier(example_sce$total_counts, nmads = 3)
example_sce$total_counts
a <- isOutlier(example_sce$total_counts, nmads = 3)
example_sce$total_counts[a]
?dim.red
load("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/ThreeGroup/three_groups.Rdata")
View(RET_CD_DEGs)
View(TCA_DEGs)
View(RET_CD)
load("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/ThreeGroup/three.seperate.Rdata")
View(all_DEGs_sort_1000)
all_DEGs_sort_1000$mark
table(all_DEGs_sort_1000$mark)
table(all_DEGs_sort_2000$mark)
View(all_DEGs)
View(common_DEGs)
View(RET_CD)
View(RET_CD_DEGs)
View(TCA_DEGs)
View(RET_NCD_DEGs)
load("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/3_grouups.Rdata")
RET_NCD
dim(RET_NCD)
View(all_DEGs_sort_2000)
all_DEGs_sort_2000$mark
table(all_DEGs_sort_2000$mark)
write.csv(all_DEGs_sort_2000, file = "/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/ThreeGroup/2000/all_DEGs_sort_2000.csv")
?kmeans
hist(rnorm(1000,10,3))
hist(rnorm(1000,10,3),breaks = 100)
library(ZIM)
zrind(1000, 10, 1, 0.5)
zrinb(1000, 10, 1, 0.5)
rzinb(1000, 10, 1, 0.5)
hist(rzinb(1000, 10, 1, 0.5))
hist(rzinb(1000, 10, 4, 0.5))
hist(rzinb(1000, 10, 7, 0.5))
hist(rzinb(1000, 10, 10, 0.5))
hist(rzinb(1000, 10, 50, 0.5))
hist(rzinb(1000, 10, 50, 0.5), breaks = 100)
hist(rzinb(1000, 10, 50, 0.5), breaks = 10)
hist(rzinb(1000, 10, 50, 0.5), breaks = 20)
hist(rzinb(1000, 10, 50, 0.5), breaks = 10)
logExpr=10; ngene=20; ncell=10; show_matrix=T; show_name=T
totalGene <- ngene*11
totalCell <- ncell*4
expr_matrix <- matrix(rep(0,totalGene*totalCell), nrow=totalGene, ncol=totalCell)
# MT1
for (i in 1:ngene) {
for (j in 1:ncell) {
expr_matrix[i,j] <- logExpr
}
}
for (i in (ngene*4+1):(ngene*5)) {
for (j in (ncell*3+1):(ncell*4)) {
expr_matrix[i,j] <- logExpr
}
}
for (i in (ngene*4+1):(ngene*5)) {
for (j in 1:ncell) {
expr_matrix[i,j] <- logExpr
}
}
# MT1'
for (i in (ngene+1):(ngene*2)) {
for (j in (ncell+1):totalCell) {
expr_matrix[i,j] <- logExpr
}
}
# MT1''
for (i in (ngene*2+1):(ngene*3)) {
for (j in (ncell+1):(ncell*2)) {
expr_matrix[i,j] <- logExpr/sqrt(i-ngene*2)
}
}
# MT1'''
for (i in (ngene*3+1):(ngene*4)) {
for (j in (ncell*2+1):(ncell*3)) {
expr_matrix[i,j] <- logExpr/sqrt(j-ncell*2)
}
}
# MT2
for (i in (ngene*5+1):(ngene*6)) {
for (j in (ncell*3+1-ncell/2):(ncell*4-ncell/2)) {
expr_matrix[i,j] <- logExpr/sqrt(2*abs(j-((ncell*3+1-ncell/2+ncell*4-ncell/2))/2))
}
}
# MT3
for (i in (ngene*6+1):(ngene*7)) {
for (j in (ncell*0+1):(ncell*1)) {
expr_matrix[i,j] <- logExpr/2
}
}
for (i in (ngene*6+1):(ngene*7)) {
expr_matrix[i,] <- expr_matrix[i,] + logExpr/2
}
# MT4
piece <- logExpr/totalCell
for (i in (ngene*7+1):(ngene*8)) {
for (j in (ncell*0+1):(totalCell)) {
#expr_matrix[i,j] <- logExpr/sqrt(1+abs(j-totalCell))
expr_matrix[i,j] <- piece*j
}
}
# MT4'
for (i in (ngene*8+1):(ngene*9)) {
for (j in (ncell*0+1):(totalCell)) {
# expr_matrix[i,j] <- logExpr/sqrt(j)
expr_matrix[i,j] <- logExpr-piece*j
}
}
# Noise1
for (i in (ngene*9+1):(ngene*10)) {
tmp_mean <- sample(1:logExpr, 1)
tmp_sd <- sample(seq(1,3,by=0.3), 1)
expr_matrix[i,] <- rnorm(totalCell, mean = tmp_mean, sd = tmp_sd)
# hist(rnorm(1000,10,3),breaks = 100)
}
# Noise2
for (i in (ngene*10+1):(ngene*11)) {
library(ZIM)
tmp_k <- sample(1:logExpr, 1)
tmp_lambda <- sample(seq(1,10,by=1), 1)
tmp_omega <- sample(seq(0,1,by=0.1), 1)
expr_matrix[i,] <- rzinb(totalCell, tmp_k, tmp_lambda, tmp_omega)
# hist(rzinb(1000, 10, 50, 0.5))
}
rownames(expr_matrix) <- 1:totalGene
colnames(expr_matrix) <- 1:totalCell
expr_matrix[expr_matrix>10] <- 10
expr_matrix[expr_matrix<0] <- 0
options(stringsAsFactors = F)
expr_matrix <- as.data.frame(expr_matrix)
annotation_col <- data.frame(cluster=colnames(expr_matrix), row.names = colnames(expr_matrix))
annotation_col[(ncell*0+1):(ncell*1),] <- "Subtype1"
annotation_col[(ncell*1+1):(ncell*2),] <- "Subtype2"
annotation_col[(ncell*2+1):(ncell*3),] <- "Subtype3"
annotation_col[(ncell*3+1):(ncell*4),] <- "Subtype4"
annotation_row <- data.frame(markerType=rownames(expr_matrix), row.names = rownames(expr_matrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
library(RColorBrewer)
annotation_colors1 <- brewer.pal(4,"Set1")
names(annotation_colors1) <- c("Subtype1", "Subtype2", "Subtype3", "Subtype4")
annotation_colors2 <- brewer.pal(10,"Set3")
names(annotation_colors2) <- c("MT1", "MT1-neg", "MT1'", "MT1''", "MT2-intermediate", "MT3", "MT4", "MT4'", "Noise1", "Noise2")
if (show_matrix){
library(pheatmap)
pheatmap(expr_matrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_col, annotation_row = annotation_row, annotation_colors=list(cluster=annotation_colors1 , markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
}
expr_matrix2 <- expr_matrix
geneCount <- dim(expr_matrix)[1]
cellCount <- dim(expr_matrix)[2]
for (i in 1:geneCount) {
randomCells <- sample(1:cellCount, as.integer(0.1*cellCount))
expr_matrix[i,randomCells] <- 0
}
pheatmap(expr_matrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_col, annotation_row = annotation_row, annotation_colors=list(cluster=annotation_colors1 , markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
method="pearson"
corMatrix <- cor(x = as.matrix(t(expr_matrix)), method = method)
corMatrix
dim(corMatrix)
dim(expr_matrix)
pheatmap(corMatrix)
corMatrix[is.na(corMatrix)] <- 0
pheatmap(corMatrix)
pheatmap(corMatrix, cluster_cols = F, cluster_rows = F)
method="spearman"
corMatrix <- cor(x = as.matrix(t(expr_matrix)), method = method)
corMatrix[is.na(corMatrix)] <- 0
pheatmap(corMatrix, cluster_cols = F, cluster_rows = F)
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
annotation_row
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
method="pearson"
corMatrix <- cor(x = as.matrix(t(expr_matrix)), method = method)
corMatrix[is.na(corMatrix)] <- 0
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
corMatrix <- cor(x = as.matrix(t(expr_matrix2)), method = method)
corMatrix[is.na(corMatrix)] <- 0
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
?pheatmap
corMatrix <- cor(x = as.matrix(t(expr_matrix2)), method = method)
corMatrix[is.na(corMatrix)] <- 0
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color = colorRampPalette(c("dark blue", "blue", "white", "orange", "red")))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color = colorRampPalette(c("dark blue", "blue", "white", "orange", "red"))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color = colorRampPalette(c(""blue", "white","red"))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color = colorRampPalette(c("blue", "white","red"))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, colorRampPalette(rev(brewer.pal(n = 7, name ="RdYlBu")))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color=colorRampPalette(rev(brewer.pal(n = 7, name ="RdYlBu")))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color=colorRampPalette(rev(brewer.pal(n = 7, name ="RdBu")))(100))
corMatrix <- cor(x = as.matrix(t(expr_matrix)), method = method)
corMatrix[is.na(corMatrix)] <- 0
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color=colorRampPalette(rev(brewer.pal(n = 7, name ="RdBu")))(100))
load("/Users/surgery/Downloads/Supplementary_Software/R/data/Test_3_Pollen.RData")
dim(Test_3_Pollen$in_X)
deng <- readRDS("/Users/surgery/Project/HOME/github/scRNA.seq.course/deng/deng-reads.rds")
dim(deng)
setwd("/Users/surgery/Project/HOME/github/MBSIT/R")
load("/Users/surgery/Project/HOME/1-projects/1.scRNA-seq/2-smart-seq/eachGroup/HSCR_5c3.Rdata")
options(stringsAsFactors = F)
expr_log3 <- t(logcounts(tmp_group))
dim(expr_log3)
colSums(expr_log3>0)>3
dim(expr_log3)
expr_log3 <- expr_log3[,colSums(expr_log3>0)>3]
dim(expr_log3)
library(WGCNA)
# standard deviation can't be zero
# cor_matrix_pearson <- WGCNA::cor(x = as.matrix((expr_log3)), method = "pearson")
cor_matrix_spearman <- WGCNA::cor(x = as.matrix((expr_log3)), method = "spearman")
dis_matrix <- 1 - abs(cor_matrix_spearman)
dis_matrix[is.na(dis_matrix)] <- 1
dis_matrix[row(dis_matrix)==col(dis_matrix)] <- 1
dim(dis_matrix)
minPerRow <- apply(dis_matrix, 2, min)
disThresd <- quantile(minPerRow, probs = seq(0, 1, 0.25))[2]
disThresd
dis_matrix <- dis_matrix[names(minPerRow[minPerRow < disThresd]),names(minPerRow[minPerRow < disThresd])]
dim(dis_matrix)
corM=dis_matrix
seq(0.05,disThresd,by=0.05)
densityDf <- data.frame(row.names=rownames(corM))
densityDf
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
densityDf
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
densityDf
apply(densityDf, 1, min)
apply(densityDf, 1, min) < 5
apply(densityDf, 1, max) < 5
densityDf
dim(densityDf)
dim(densityDf[apply(densityDf, 1, max) < 5,])
densityDf <- densityDf[apply(densityDf, 1, max) < 5,]
densityDf
densityDf <- as.data.frame(densityDf)
densityDf
densityDf[1,]
densityDf[1,] * seq(0.05,disThresd,by=0.05)
log(1+densityDf[1,]) * seq(0.05,disThresd,by=0.05)
sum(log(1+densityDf[1,]) * seq(0.05,disThresd,by=0.05))
apply(densityDf, 1, function(x) {return(sum(log(1+densityDf[1,]) * seq(0.05,disThresd,by=0.05)))})
densityDf <- data.frame(row.names=rownames(corM))
for (i in seq(0.05,disThresd,by=0.05)){
densityDf <- cbind(densityDf, rowSums(corM<i))
}
colnames(densityDf) <- as.character(seq(0.05,disThresd,by=0.05))
# densityDf <- densityDf[densityDf$`0.7` > 5,]
densityDf <- densityDf[apply(densityDf, 1, max) > 5,]
densityDf <- as.data.frame(densityDf)
densityDf
apply(densityDf, 1, function(x) {return(sum(log(1+densityDf[1,]) * seq(0.05,disThresd,by=0.05)))})
sort(apply(densityDf, 1, function(x) {return(sum(log(1+densityDf[1,]) * seq(0.05,disThresd,by=0.05)))}))
sort(apply(densityDf, 1, function(x) {return(sum(log(1+x) * seq(0.05,disThresd,by=0.05)))}))
densityDf$centrality <- apply(densityDf, 1, function(x) {return(sum(log(1+x) * seq(0.05,disThresd,by=0.05)))})
densityDf
densityDf[order(densityDf, decreasing=T),]
densityDf[order(densityDf$centrality, decreasing=T),]
densityDf <- densityDf[order(densityDf$centrality, decreasing=T),]
write.csv(densityDf, file = "densityDf.csv")
View(densityDf)
(1-seq(0.05,disThresd,by=0.05))
densityDf <- densityDf[apply(densityDf, 1, max) > 5,]
densityDf <- as.data.frame(densityDf)
densityDf$centrality <- apply(densityDf, 1, function(x) {return(sum(log(1+x) * (1-seq(0.05,disThresd,by=0.05))))})
densityDf <- densityDf[order(densityDf$centrality, decreasing=T),]
densityDf
densityDf[,1]
densityDf[1,]
plot(densityDf[1,])
a <- data.frame(x=names(densityDf[1,]), y=densityDf[1,])
a
a <- data.frame(x=names(densityDf[1,]), y=as.vector(densityDf[1,]))
a
a <- data.frame(x=names(densityDf[1,]), y=as.vector(densityDf[1,]))
names(densityDf[1,])
as.vector(densityDf[1,])
as.integer(densityDf[1,])
a <- data.frame(x=names(densityDf[1,]), y=as.integer(densityDf[1,]))
a
a[1:13,]
a <- a[1:13,]
a$x
a$x <- as.double(a$x)
a$x
a$x <- 1-a$x
a$y <- log2(1+a$y)
a
plot(a)
?plot
plot(a, type="l", col="blue")
plot(a, type="l", col="blue", x="1-k", y="log2(1+count(i))", title="Centrality of CLDN6")
plot(a, type="l", col="blue", xlab="1-k", ylab="log2(1+count(i))", main="Centrality of CLDN6")
plot(a, type="b", col="blue", xlab="1-k", ylab="log2(1+count(i))", main="Centrality of CLDN6")
