dchisq(1, df = 1:3)
qchisq(1, df = 1:3)
qchisq(10, df = 1:3)
qchisq(0.5, df = 1:3)
?scale
(xy <- cbind(x = 1:10, y = c(1:3, 8:5, 8:10)))
w1 <- c(0,0,0,1,1,1,1,1,0,0)
cov.wt(xy, wt = w1) # i.e. method = "unbiased"
cov.wt(xy, wt = w1, method = "ML", cor = TRUE)
library(scater)
data("sc_example_counts")
data("sc_example_cell_info")
example_sce <- SingleCellExperiment(
assays = list(counts = sc_example_counts),
colData = sc_example_cell_info
)
example_sce <- calculateQCMetrics(example_sce)
## with a set of feature controls defined
example_sce <- calculateQCMetrics(example_sce,
feature_controls = list(set1 = 1:40))
isOutlier(example_sce$total_counts, nmads = 3)
example_sce$total_counts
a <- isOutlier(example_sce$total_counts, nmads = 3)
example_sce$total_counts[a]
?dim.red
load("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/ThreeGroup/three_groups.Rdata")
View(RET_CD_DEGs)
View(TCA_DEGs)
View(RET_CD)
load("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/ThreeGroup/three.seperate.Rdata")
View(all_DEGs_sort_1000)
all_DEGs_sort_1000$mark
table(all_DEGs_sort_1000$mark)
table(all_DEGs_sort_2000$mark)
View(all_DEGs)
View(common_DEGs)
View(RET_CD)
View(RET_CD_DEGs)
View(TCA_DEGs)
View(RET_NCD_DEGs)
load("/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/3_grouups.Rdata")
RET_NCD
dim(RET_NCD)
View(all_DEGs_sort_2000)
all_DEGs_sort_2000$mark
table(all_DEGs_sort_2000$mark)
write.csv(all_DEGs_sort_2000, file = "/Users/surgery/Project/HOME/1-projects/0.bulk_RNA-Seq/11-RET_BACE2_paper/ThreeGroup/2000/all_DEGs_sort_2000.csv")
?kmeans
setwd("/Users/surgery/Project/HOME/github/MBSIT/R")
load("/Users/surgery/Project/HOME/1-projects/1.scRNA-seq/2-smart-seq/eachGroup/HSCR_5c3.Rdata")
tmp_group
logcounts(tmp_group)
counts(tmp_group)[1:5,1:5]
rowSums(counts(tmp_group)>=5)
cellCountPerGene <- rowSums(counts(tmp_group)>=5)
hist(cellCountPerGene)
colSums(counts(tmp_group)>=5)
geneCountPerCell <- colSums(counts(tmp_group)>=5)
hist(geneCountPerCell)
apply(counts(tmp_group), 1, sd)
apply(counts(tmp_group), 1, sd)/apply(counts(tmp_group), 1, mean)
apply(counts(tmp_group), 2, sd)/apply(counts(tmp_group), 2, mean)
cvPerGene <- apply(counts(tmp_group), 1, sd)/apply(counts(tmp_group), 1, mean)
cvPerCell <- apply(counts(tmp_group), 2, sd)/apply(counts(tmp_group), 2, mean)
hist(cvPerGene)
hist(cvPerCell)
colSums(counts(tmp_group))
totalReadCount <- colSums(counts(tmp_group))
hist(totalReadCount)
hist(cellCountPerGene)
hist(geneCountPerCell)
hist(totalReadCount)
hist(cvPerGene)
cvPerGene
sort(cvPerGene)
prin_comp <- prcomp(logcounts(tmp_group), scale. = T)
prin_comp
names(prin_comp)
prin_comp$center
prin_comp$scale
prin_comp$rotation
prin_comp$x
dim(prin_comp$x)
dim(tmp_group)
biplot(prin_comp, scale = 0)
biplot(prin_comp, scale = 0)
std_dev <- prin_comp$sdev
std_dev
pr_var <- std_dev^2
#check variance of first 10 components
pr_var[1:10]
prop_varex <- pr_var/sum(pr_var)
prop_varex[1:20]
plot(prop_varex, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
prin_comp$sdev
prin_comp$rotation
?prcomp
prin_comp$sdev
dim(prin_comp$x)
dim(prin_comp$rotation)
dim(prin_comp$center)
prin_comp$center
prin_comp <- prcomp(t(logcounts(tmp_group)), scale. = T)
mydata <- t(logcounts(tmp_group))
dim(mydata[,colSums(mydata)>0])
mydata <- mydata[,colSums(mydata)>0]
prin_comp <- prcomp(mydata, scale. = T)
prin_comp$center
dim(prin_comp$rotation )
dim(prin_comp$x)
std_dev <- prin_comp$sdev
#compute variance
pr_var <- std_dev^2
#check variance of first 10 components
pr_var[1:10]
prop_varex <- pr_var/sum(pr_var)
prop_varex[1:20]
plot(prop_varex, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
prin_comp$rotation
prin_comp$rotation[1:5,1:5]
prin_comp$x
dim(prin_comp$x)
prin_comp$x[1:5,1:5]
plot(prin_comp$x[,1:2])
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
cumsum(prop_varex)
# DBSCAN
library(dbscan)
eps <- 1
minPts <- 3
res <- dbscan(prin_comp$x, eps = eps, minPts = minPts)
res
res <- dbscan(prin_comp$x[1:5,1:10], eps = eps, minPts = minPts)
res
prin_comp$x[1:5,1:10]
eps <- 10
minPts <- 3
res <- dbscan(prin_comp$x[1:5,1:10], eps = eps, minPts = minPts)
res
eps <- 100
minPts <- 3
res <- dbscan(prin_comp$x[1:5,1:10], eps = eps, minPts = minPts)
res
res$cluster
res$cluster
1:10
table(res$cluster)
table(res$cluster)[:1]
table(res$cluster)["1"]
for ( eps in 1:100){
#eps <- 100
minPts <- 3
res <- dbscan(prin_comp$x[1:5,1:10], eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["1"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
allnoiseCount <- c()
for ( eps in 1:100){
#eps <- 100
minPts <- 3
res <- dbscan(prin_comp$x[1:5,1:10], eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["1"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
allnoiseCount
allnoiseCount <- c()
for ( eps in 1:100){
#eps <- 100
minPts <- 3
res <- dbscan(prin_comp$x, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["1"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
allnoiseCount
for ( eps in 1:1000){
#eps <- 100
minPts <- 3
res <- dbscan(prin_comp$x, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["1"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
allnoiseCount <- c()
for ( eps in 1:1000){
#eps <- 100
minPts <- 3
res <- dbscan(prin_comp$x, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["1"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
allnoiseCount <- c()
for ( i in 1:100){
eps <- 2^i
minPts <- 3
res <- dbscan(prin_comp$x, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["1"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
allnoiseCount
allnoiseCount <- c()
for ( i in 1:100){
eps <- 2*i
minPts <- 3
res <- dbscan(prin_comp$x, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["1"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
allnoiseCount
allnoiseCount <- c()
alleps <- c()
for ( i in 1:100){
eps <- 2*i
alleps <- c(alleps, eps)
minPts <- 3
res <- dbscan(prin_comp$x, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["1"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount
res <- dbscan(prin_comp$x, eps = 142, minPts = minPts)
res
allnoiseCount <- c()
alleps <- c()
for ( i in 1:100){
eps <- 2*i
alleps <- c(alleps, eps)
minPts <- 3
res <- dbscan(prin_comp$x, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount
res <- dbscan(prin_comp$x, eps = 176, minPts = minPts)
res
res$cluster
rownames(prin_comp$x)[res$cluster==0]
pca <- prin_comp$x
pca$cluster <- res$cluster
pca <- as.data.frame(prin_comp$x)
pca$cluster <- res$cluster
pca
ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point()
library(ggplot2)
ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point()
allnoiseCount <- c()
alleps <- c()
for ( i in 1:100){
eps <- 3*i
alleps <- c(alleps, i)
minPts <- 3
res <- dbscan(prin_comp$x, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount
allnoiseCount <- c()
alleps <- c()
for ( i in 46:66){
eps <- 2*i
alleps <- c(alleps, i)
minPts <- 3
res <- dbscan(prin_comp$x, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount
std_dev <- prin_comp$sdev
std_dev
std_dev^2
pr_var[1:10]
pr_var/sum(pr_var)
prop_varex <- pr_var/sum(pr_var)
prop_varex[1:20]
?plotPCA
scater::plotPCA(tmp_group, exprs_values="logcounts")
tmp_group$cellGroup
tmp_group$rename_sc3_4
prin_comp <- scater::plotPCA(tmp_group, exprs_values="logcounts", colour_by="tmp_group$rename_sc3_4")
prin_comp <- scater::plotPCA(tmp_group, exprs_values="logcounts", colour_by="rename_sc3_4")
prin_comp
prin_comp$data
prin_comp$layers
prin_comp$scales
prin_comp$mapping
prin_comp$theme
prin_comp$coordinates
prin_comp$facet
scater::plotPCA
prin_comp$data
prin_comp2 <- scater::plotPCA(tmp_group, exprs_values="logcounts", colour_by="rename_sc3_4")
?prcomp
prin_comp <- prcomp(mydata, scale. = T, center = T)
names(prin_comp)
#outputs the mean of variables
prin_comp$center
#outputs the standard deviation of variables
prin_comp$scale
#Each column of rotation matrix contains the principal component loading vector
prin_comp$rotation
prin_comp2[1:5,1:5]
prin_comp2[1:5,1:4]
prin_comp2[1:5,1:3]
prin_comp2$data[1:5,1:5]
prin_comp2$data[1:5,1:4]
prin_comp$x[1:5,1:4]
std_dev <- prin_comp$sdev
#compute variance
pr_var <- std_dev^2
#check variance of first 10 components
pr_var[1:10]
#proportion of variance explained
prop_varex <- pr_var/sum(pr_var)
prop_varex[1:20]
#scree plot
plot(prop_varex, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
plot(prin_comp$x[,1:2])
library(pcaMethods)
?pca
wine[,-1]
wine <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data", sep=",")
wine[,-1]
dim(wine[,-1])
winePCAmethods <- pca(mydata, scale = "uv", center = T, nPcs = 100, method = "svd")
slplot(winePCAmethods, scoresLoadings = c(T,T), scol = wineClasses)
# The first column corresponds to the classes
wineClasses <- factor(wine$Cvs)
slplot(winePCAmethods, scoresLoadings = c(T,T), scol = wineClasses)
wineClasses
# Name the variables
colnames(wine) <- c("Cvs","Alcohol","Malic acid","Ash","Alcalinity of ash", "Magnesium", "Total phenols", "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
# The first column corresponds to the classes
wineClasses <- factor(wine$Cvs)
wineClasses
slplot(winePCAmethods, scoresLoadings = c(T,T), scol = wineClasses)
wineClasses
?slplot
slplot(winePCAmethods, scol = wineClasses)
winePCAmethods
winePCAmethods@completeObs
winePCAmethods@scores
winePCAmethods@scores[1:5,1:4]
prin_comp$x[1:5,1:4]
prop_varex[1:20]
winePCAmethods@loadings
winePCAmethods@nVar
winePCAmethods@network
winePCAmethods@varLimit
winePCAmethods@sDev
winePCAmethods@sDev/sum(winePCAmethods@sDev)
winePCAmethods@sDev^2/sum(winePCAmethods@sDev^2)
winePCAmethods@sDev^2/sum(winePCAmethods@sDev^2)
prop_varex
prop_varex2 <- winePCAmethods@sDev^2/sum(winePCAmethods@sDev^2)
plot(cumsum(prop_varex2), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
cumsum(prop_varex2)
winePCAmethods@scores
plot(winePCAmethods@scores[,1:2])
winePCAmethods@scores
dim(winePCAmethods@scores)
allnoiseCount <- c()
alleps <- c()
for ( i in 46:66){
eps <- 3*i
alleps <- c(alleps, i)
minPts <- 3
res <- dbscan(winePCAmethods@scores, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
alleps
allnoiseCount
allnoiseCount <- c()
alleps <- c()
for ( i in 1:100){
eps <- 5*(i-1)
alleps <- c(alleps, eps)
minPts <- 3
res <- dbscan(winePCAmethods@scores, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount
?seq
seq(35, 170, by=(170-35)/100)
mylevels <- seq(35, 170, by=(170-35)/100)
allnoiseCount <- c()
alleps <- c()
for ( eps in mylevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
minPts <- 3
res <- dbscan(winePCAmethods@scores, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount
plot(allnoiseCount)
363*0.05
res <- dbscan(prin_comp$x, eps = 126.8, minPts = minPts)
res
rownames(winePCAmethods@scores)[res$cluster==0]
res
res <- dbscan(prin_comp$x, eps = 126.8, minPts = 3)
res
res$cluster
mylevels
minPts
table(res$cluster)["0"]
mylevels <- seq(35, 170, by=(170-35)/100)
allnoiseCount <- c()
alleps <- c()
for ( eps in mylevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
minPts <- 3
res <- dbscan(winePCAmethods@scores, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount
res <- dbscan(winePCAmethods@scores, eps = 126.8, minPts = 3)
res
res$cluster
rownames(winePCAmethods@scores)[res$cluster==0]
pca <- as.data.frame(winePCAmethods@scores)
pca$cluster <- res$cluster
ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point()
allnoiseCount <- c()
alleps <- c()
for ( i in 1:100){
eps <- 5*(i-1)
alleps <- c(alleps, eps)
minPts <- 5
res <- dbscan(winePCAmethods@scores, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount
mylevels <- seq(35, 165, by=(165-35)/100)
allnoiseCount <- c()
alleps <- c()
for ( eps in mylevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
minPts <- 5
res <- dbscan(winePCAmethods@scores, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount
res <- dbscan(winePCAmethods@scores, eps = 126, minPts = 5)
# rownames(prin_comp$x)[res$cluster==0]
rownames(winePCAmethods@scores)[res$cluster==0]
pca <- as.data.frame(winePCAmethods@scores)
pca$cluster <- res$cluster
ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point()
allnoiseCount <- c()
alleps <- c()
for ( i in 1:100){
eps <- 5*(i-1)
alleps <- c(alleps, eps)
minPts <- 10
res <- dbscan(winePCAmethods@scores, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount
mylevels <- seq(40, 165, by=(165-40)/100)
allnoiseCount <- c()
alleps <- c()
for ( eps in mylevels){
#eps <- 5*(i-1)
alleps <- c(alleps, eps)
minPts <- 10
res <- dbscan(winePCAmethods@scores, eps = eps, minPts = minPts)
noiseCount <- table(res$cluster)["0"]
allnoiseCount <- c(allnoiseCount, noiseCount)
}
names(allnoiseCount) <- alleps
allnoiseCount
res <- dbscan(winePCAmethods@scores, eps = 126.25, minPts = 10)
# rownames(prin_comp$x)[res$cluster==0]
rownames(winePCAmethods@scores)[res$cluster==0]
pca <- as.data.frame(winePCAmethods@scores)
pca$cluster <- res$cluster
ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point()
