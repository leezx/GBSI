table(Test_3_Pollen$true_labs)
Test_3_Pollen$in_X
expr <- Test_3_Pollen$in_X
M=expr
pcNum=100
exprMatrix <- t(M)
exprMatrix <- exprMatrix[,colSums(exprMatrix)>0]
pcMatrix <- 0
start_time <- Sys.time()
if (method=="prcomp"){
prin_comp <- prcomp(exprMatrix, scale. = T, center = T, rank. = pcNum)
#if (pcNum < dim(prin_comp$x)[2]) {
#  pcMatrix <- prin_comp$x[,1:pcNum]
#} else if (pcNum > dim(prin_comp$x)[2]) {
#  print("ERROR: please choose a smaller pcNum!!!")
#} else { pcMatrix <- prin_comp$x }
} else if (method=="pcaMethods"){
library(pcaMethods)
prin_comp <- pca(exprMatrix, scale = "uv", center = T, nPcs = pcNum, method = "svd")
pcMatrix <- prin_comp@scores[,1:pcNum]
}
end_time <- Sys.time()
print("matrix size: ")
print(dim(M))
print(paste("pcNum: ", pcNum, ",method: ", method))
print(end_time - start_time)
dim(pcMatrix)
pcMatrix
if (method=="prcomp"){
prin_comp <- prcomp(exprMatrix, scale. = T, center = T, rank. = pcNum)
pcMatrix <- prin_comp$x
#if (pcNum < dim(prin_comp$x)[2]) {
#  pcMatrix <- prin_comp$x[,1:pcNum]
#} else if (pcNum > dim(prin_comp$x)[2]) {
#  print("ERROR: please choose a smaller pcNum!!!")
#} else { pcMatrix <- prin_comp$x }
} else if (method=="pcaMethods"){
library(pcaMethods)
prin_comp <- pca(exprMatrix, scale = "uv", center = T, nPcs = pcNum, method = "svd")
pcMatrix <- prin_comp@scores[,1:pcNum]
}
end_time <- Sys.time()
print("matrix size: ")
print(dim(M))
print(paste("pcNum: ", pcNum, ",method: ", method))
print(end_time - start_time)
pcMatrix
library(parallelDist)
# dis_matrix <- parDist(x = as.matrix(pcMatrix), method = "euclidean", threads=threads)
dis_matrix <- parDist(x = as.matrix(pcMatrix), method = "mahalanobis", threads=threads)
dis_matrix <- as.matrix(dis_matrix)
dis_matrix[is.na(dis_matrix)] <- 0
rownames(dis_matrix) <- rownames(pcMatrix)
colnames(dis_matrix) <- rownames(dis_matrix)
disOrder <- sort(apply(dis_matrix, 2, function(x) {return(mean(sort(x)[(minPts+1)]))}), decreasing=T)
plot(disOrder)
outlier <- disOrder[1:(length(disOrder)*percent)]
pca <- as.data.frame(pcMatrix)
pca$cluster <- 1
pca[names(outlier),]$cluster <- 0
pca$cluster <- as.character(pca$cluster)
library(ggplot2)
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point())
pca[1:5,1:5]
Test_3_Pollen[1:5,1:5]
Test_3_Pollen$in_X[1:5,1:5]
pca$true <- Test_3_Pollen$true_labs
pca$SIMLR <- Test_3_Pollen$results$y$cluster
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) + geom_point())
pca$true <- as.character(Test_3_Pollen$true_labs)
pca$SIMLR <- as.character(Test_3_Pollen$results$y$cluster)
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) + geom_point())
pca
pca$true
as.character(Test_3_Pollen$true_labs)
as.character(Test_3_Pollen$true_labs$V1)
as.character(Test_3_Pollen$results$y$cluster$V1)
as.character(Test_3_Pollen$results$y$cluster)
pca$true <- as.character(Test_3_Pollen$true_labs$V1)
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point())
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) + geom_point())
print(ggplot(pca, aes(x=PC1, y=PC2, color=SIMLR)) + geom_point())
pcNum=2
exprMatrix <- t(M)
exprMatrix <- exprMatrix[,colSums(exprMatrix)>0]
pcMatrix <- 0
start_time <- Sys.time()
if (method=="prcomp"){
prin_comp <- prcomp(exprMatrix, scale. = T, center = T, rank. = pcNum)
pcMatrix <- prin_comp$x
#if (pcNum < dim(prin_comp$x)[2]) {
#  pcMatrix <- prin_comp$x[,1:pcNum]
#} else if (pcNum > dim(prin_comp$x)[2]) {
#  print("ERROR: please choose a smaller pcNum!!!")
#} else { pcMatrix <- prin_comp$x }
} else if (method=="pcaMethods"){
library(pcaMethods)
prin_comp <- pca(exprMatrix, scale = "uv", center = T, nPcs = pcNum, method = "svd")
pcMatrix <- prin_comp@scores[,1:pcNum]
}
end_time <- Sys.time()
print("matrix size: ")
print(dim(M))
print(paste("pcNum: ", pcNum, ",method: ", method))
print(end_time - start_time)
# return(pcMatrix)
# parallelDist
library(parallelDist)
# dis_matrix <- parDist(x = as.matrix(pcMatrix), method = "euclidean", threads=threads)
dis_matrix <- parDist(x = as.matrix(pcMatrix), method = "mahalanobis", threads=threads)
dis_matrix <- as.matrix(dis_matrix)
dis_matrix[is.na(dis_matrix)] <- 0
rownames(dis_matrix) <- rownames(pcMatrix)
colnames(dis_matrix) <- rownames(dis_matrix)
disOrder <- sort(apply(dis_matrix, 2, function(x) {return(mean(sort(x)[(minPts+1)]))}), decreasing=T)
exprMatrix <- t(M)
exprMatrix <- exprMatrix[,colSums(exprMatrix)>0]
pcMatrix <- 0
start_time <- Sys.time()
if (method=="prcomp"){
prin_comp <- prcomp(exprMatrix, scale. = T, center = T, rank. = pcNum)
pcMatrix <- prin_comp$x
#if (pcNum < dim(prin_comp$x)[2]) {
#  pcMatrix <- prin_comp$x[,1:pcNum]
#} else if (pcNum > dim(prin_comp$x)[2]) {
#  print("ERROR: please choose a smaller pcNum!!!")
#} else { pcMatrix <- prin_comp$x }
} else if (method=="pcaMethods"){
library(pcaMethods)
prin_comp <- pca(exprMatrix, scale = "uv", center = T, nPcs = pcNum, method = "svd")
pcMatrix <- prin_comp@scores[,1:pcNum]
}
end_time <- Sys.time()
print("matrix size: ")
print(dim(M))
print(paste("pcNum: ", pcNum, ",method: ", method))
print(end_time - start_time)
# return(pcMatrix)
# parallelDist
library(parallelDist)
# dis_matrix <- parDist(x = as.matrix(pcMatrix), method = "euclidean", threads=threads)
dis_matrix <- parDist(x = as.matrix(pcMatrix), method = "mahalanobis", threads=threads)
dis_matrix <- as.matrix(dis_matrix)
dis_matrix[is.na(dis_matrix)] <- 0
rownames(dis_matrix) <- rownames(pcMatrix)
colnames(dis_matrix) <- rownames(dis_matrix)
disOrder <- sort(apply(dis_matrix, 2, function(x) {return(mean(sort(x)[(minPts+1)]))}), decreasing=T)
plot(disOrder)
outlier <- disOrder[1:(length(disOrder)*percent)]
pca <- as.data.frame(pcMatrix)
pca$cluster <- 1
pca[names(outlier),]$cluster <- 0
pca$true <- as.character(Test_3_Pollen$true_labs$V1)
pca$SIMLR <- as.character(Test_3_Pollen$results$y$cluster)
pca$cluster <- as.character(pca$cluster)
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point())
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) + geom_point())
pca
pca[pca$true=="1",]
pca[pca$true=="9",]
pca[pca$true=="8",]
pca[pca$true=="11",]
c8 <- pca[pca$true=="8",]
c8
c8[order(c8$PC2),]
c8[order(c8$PC2, decreasing = T),]
pca[pca$true=="4",]
c4 <- pca[pca$true=="4",]
c4
c4 <- pca[pca$true=="4",]
c4[order(c4$PC1, decreasing = F),]
dim(c4)
c4[order(c4$PC1, decreasing = F),][2:26]
c4[order(c4$PC1, decreasing = F),][2:26,]
c8
dim(c8)
c8 <- pca[pca$true=="8",]
c8n <- rownames(c8[order(c8$PC2, decreasing = T),][2:42])
c8 <- pca[pca$true=="8",]
c8n <- rownames(c8[order(c8$PC2, decreasing = T),][2:42,])
c8n
c8[order(c8$PC2, decreasing = T),]
c11 <- pca[pca$true=="11",]
c11
c11[order(c11$PC2, decreasing = T),]
c11[order(c11$PC1, decreasing = T),]
dim(c11)
c4 <- pca[pca$true=="4",]
c4n <- rownames(c4[order(c4$PC1, decreasing = F),][2:26,])
# get y largest 8: 2
c8 <- pca[pca$true=="8",]
c8n <- rownames(c8[order(c8$PC2, decreasing = T),][3:42,])
# get x largest 11: 5
c11 <- pca[pca$true=="11",]
c11n <- rownames(c11[order(c11$PC1, decreasing = T),][5:24,])
pca
pca[!rownames(pca)%in%c(c4n, c8n, c11n)]
pca[!rownames(pca)%in%c(c4n, c8n, c11n),]
pca2 <- pca[!rownames(pca)%in%c(c4n, c8n, c11n),]
print(ggplot(pca2, aes(x=PC1, y=PC2, color=TRUE)) + geom_point())
print(ggplot(pca2, aes(x=PC1, y=PC2, color=true)) + geom_point())
expr
expr[!rownames(expr)%in%c(c4n, c8n, c11n),]
dim(expr)
dim(expr[!rownames(expr)%in%c(c4n, c8n, c11n),])
dim(expr[,!colnames(expr)%in%c(c4n, c8n, c11n)])
expr2 <- expr[,!colnames(expr)%in%c(c4n, c8n, c11n)]
M=expr2
expr2 <- expr[,!colnames(expr)%in%c(c4n, c8n, c11n)]
truel <- Test_3_Pollen$true_labs$V1[!colnames(expr)%in%c(c4n, c8n, c11n)]
simlrl <- Test_3_Pollen$results$y$cluster[!colnames(expr)%in%c(c4n, c8n, c11n)]
exprMatrix <- t(M)
exprMatrix <- exprMatrix[,colSums(exprMatrix)>0]
pcMatrix <- 0
start_time <- Sys.time()
if (method=="prcomp"){
prin_comp <- prcomp(exprMatrix, scale. = T, center = T, rank. = pcNum)
pcMatrix <- prin_comp$x
#if (pcNum < dim(prin_comp$x)[2]) {
#  pcMatrix <- prin_comp$x[,1:pcNum]
#} else if (pcNum > dim(prin_comp$x)[2]) {
#  print("ERROR: please choose a smaller pcNum!!!")
#} else { pcMatrix <- prin_comp$x }
} else if (method=="pcaMethods"){
library(pcaMethods)
prin_comp <- pca(exprMatrix, scale = "uv", center = T, nPcs = pcNum, method = "svd")
pcMatrix <- prin_comp@scores[,1:pcNum]
}
end_time <- Sys.time()
print("matrix size: ")
print(dim(M))
print(paste("pcNum: ", pcNum, ",method: ", method))
print(end_time - start_time)
# return(pcMatrix)
# parallelDist
library(parallelDist)
# dis_matrix <- parDist(x = as.matrix(pcMatrix), method = "euclidean", threads=threads)
dis_matrix <- parDist(x = as.matrix(pcMatrix), method = "mahalanobis", threads=threads)
dis_matrix <- as.matrix(dis_matrix)
dis_matrix[is.na(dis_matrix)] <- 0
rownames(dis_matrix) <- rownames(pcMatrix)
colnames(dis_matrix) <- rownames(dis_matrix)
disOrder <- sort(apply(dis_matrix, 2, function(x) {return(mean(sort(x)[(minPts+1)]))}), decreasing=T)
plot(disOrder)
outlier <- disOrder[1:(length(disOrder)*percent)]
pca <- as.data.frame(pcMatrix)
pca$cluster <- 1
pca[names(outlier),]$cluster <- 0
pca$true <- as.character(truel)
pca$SIMLR <- as.character(simlrl)
pca$cluster <- as.character(pca$cluster)
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) + geom_point()
)
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) + geom_point())
print(ggplot(pca, aes(x=PC1, y=PC2, color=SIMLR)) + geom_point())
?brewer.pal
library(RColorBrewer)
pca$cluster
pca$true
table(pca$true)
length(table(pca$true))
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) +
geom_point(size=1.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
theme(legend.title=element_blank()) +
scale_color_manual(values=brewer.pal(11,"Set1")) )
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) +
geom_point(size=1.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
theme(legend.title=element_blank()) +
scale_color_manual(values=brewer.pal(11,"Set1")) )
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) +
geom_point(size=1.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
theme(legend.title=element_blank()) +
scale_color_manual(values=brewer.pal(11,"Set3")) )
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) +
geom_point(size=1.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
theme(legend.title=element_blank()) +
scale_color_manual(values=brewer.pal(11,"Paired")) )
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) +
geom_point(size=1.5, alpha=2) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
theme(legend.title=element_blank()) +
scale_color_manual(values=brewer.pal(11,"Paired")) )
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) +
geom_point(size=1.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
theme(legend.title=element_blank()) +
scale_color_manual(values=brewer.pal(11,"Paired")) )
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) +
geom_point(size=2.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
theme(legend.title=element_blank()) +
scale_color_manual(values=brewer.pal(11,"Paired")) )
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) +
geom_point(size=2.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
theme(legend.title=element_blank()) +
scale_color_manual(values=brewer.pal(11,"Set3")) )
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) +
geom_point(size=2.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
theme(legend.title=element_blank()) +
scale_color_manual(values=brewer.pal(11,"Paired")) )
print(ggplot(pca, aes(x=PC1, y=PC2, color=true)) +
geom_point(size=2.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
scale_color_manual(values=brewer.pal(11,"Paired")) )
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) +
geom_point(size=2.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
scale_color_manual(values=brewer.pal(11,"Paired")[1:2]) )
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) +
geom_point(size=2.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
scale_color_manual(values=brewer.pal(11,"Paired")[2:3]) )
pca$outlier <- "NO"
pca[names(outlier),]$outlier <- "YES"
pca$outlier <- as.character(pca$outlier)
pca$groundTruth <- as.character(truel)
print(ggplot(pca, aes(x=PC1, y=PC2, color=cluster)) +
geom_point(size=2.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
scale_color_manual(values=brewer.pal(11,"Paired")[2:3]) )
print(ggplot(pca, aes(x=PC1, y=PC2, color=outlier)) +
geom_point(size=2.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
scale_color_manual(values=brewer.pal(11,"Paired")[2:3]) )
brewer.pal(11,"Paired")[2:3]
print(ggplot(pca, aes(x=PC1, y=PC2, color=outlier)) +
geom_point(size=2.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
scale_color_manual(values=c("#B2DF8A","#1F78B4")) )
outliers <- mvoutlier::pcout(expr2, makeplot = FALSE,
explvar = 0.5, crit.M1 = 0.9,
crit.c1 = 5, crit.M2 = 0.9,
crit.c2 = 0.99, cs = 0.25,
outbound = 0.05)
expr2
dim(expr2)
dim(expr2[rowSums(expr2)>0,])
dim(expr2[colSums(expr2)>0,])
duplicated(expr2)
sum(duplicated(expr2))
x <- expr2
p = ncol(x)
n = nrow(x)
x.mad = apply(x, 2, mad)
x.mad
outliers <- mvoutlier::pcout(expr, makeplot = FALSE,
explvar = 0.5, crit.M1 = 0.9,
crit.c1 = 5, crit.M2 = 0.9,
crit.c2 = 0.99, cs = 0.25,
outbound = 0.05)
?mad
expr2["204",]
mad(expr2["204",])
mad(expr2[,"204"])
expr2[,"204"]
expr2[,"204"] > 0
sum(expr2[,"204"] > 0)
x.sc <- scale(x, apply(x, 2, median), x.mad)
x.svd <- svd(scale(x.sc, TRUE, FALSE))
a <- x.svd$d^2/(n - 1)
p1 <- (1:p)[(cumsum(a)/sum(a) > explvar)][1]
x.pc <- x.sc %*% x.svd$v[, 1:p1]
xpc.sc <- scale(x.pc, apply(x.pc, 2, median), apply(x.pc,
2, mad))
wp <- abs(apply(xpc.sc^4, 2, mean) - 3)
xpcw.sc <- xpc.sc %*% diag(wp/sum(wp))
xpc.norm <- sqrt(apply(xpcw.sc^2, 1, sum))
x.dist1 <- xpc.norm * sqrt(qchisq(0.5, p1))/median(xpc.norm)
M1 <- quantile(x.dist1, crit.M1)
const1 <- median(x.dist1) + crit.c1 * mad(x.dist1)
w1 <- (1 - ((x.dist1 - M1)/(const1 - M1))^2)^2
w1[x.dist1 < M1] <- 1
w1[x.dist1 > const1] <- 0
xpc.norm <- sqrt(apply(xpc.sc^2, 1, sum))
x.dist2 <- xpc.norm * sqrt(qchisq(0.5, p1))/median(xpc.norm)
M2 <- sqrt(qchisq(crit.M2, p1))
const2 <- sqrt(qchisq(crit.c2, p1))
w2 <- (1 - ((x.dist2 - M2)/(const2 - M2))^2)^2
w2[x.dist2 < M2] <- 1
w2[x.dist2 > const2] <- 0
wfinal <- (w1 + cs) * (w2 + cs)/((1 + cs)^2)
wfinal01 <- round(wfinal + 0.5 - outbound)
if (makeplot) {
op <- par(mfrow = c(3, 2), mar = c(4, 4, 2, 2))
on.exit(par(op))
plot(x.dist1, xlab = "Index", ylab = "Distance (location)",
...)
abline(h = const1)
abline(h = M1, lty = 2)
plot(w1, xlab = "Index", ylab = "Weight (location)",
ylim = c(0, 1), ...)
abline(h = 0)
abline(h = 1, lty = 2)
plot(x.dist2, xlab = "Index", ylab = "Distance (scatter)",
...)
abline(h = const2)
abline(h = M2, lty = 2)
plot(w2, xlab = "Index", ylab = "Weight (scatter)", ylim = c(0,
1), ...)
abline(h = 0)
abline(h = 1, lty = 2)
plot(wfinal, xlab = "Index", ylab = "Weight (combined)",
ylim = c(0, 1), ...)
abline(h = cs)
plot(wfinal01, xlab = "Index", ylab = "Final 0/1 weight",
ylim = c(0, 1), ...)
}
x.sc
dim(expr2)
sum(expr2[,"204"] > 0)
expr3 <- expr2[rowSums(expr2>0)>3600,]
dim(expr3)
(expr2>0)[1:5,1:5]
expr3 <- expr2[colSums(expr2>0)>3600,]
dim(expr3)
mad(expr2["204",])
expr2[,"204"]
mad(expr2[,"204"])
expr2[1:5,1:5]
outliers <- mvoutlier::pcout((expr2+0.1), makeplot = FALSE,
explvar = 0.5, crit.M1 = 0.9,
crit.c1 = 5, crit.M2 = 0.9,
crit.c2 = 0.99, cs = 0.25,
outbound = 0.05)
mad((expr2+0.1)[,"204"])
(expr2+0.1)[,"204"]
pcMatrix
outliers <- mvoutlier::pcout(pcMatrix, makeplot = FALSE,
explvar = 0.5, crit.M1 = 0.9,
crit.c1 = 5, crit.M2 = 0.9,
crit.c2 = 0.99, cs = 0.25,
outbound = 0.05)
outliers
!as.logical(outliers$wfinal01)
table(!as.logical(outliers$wfinal01))
dim(expr)
pcNum=249
exprMatrix <- t(M)
exprMatrix <- exprMatrix[,colSums(exprMatrix)>0]
pcMatrix <- 0
start_time <- Sys.time()
if (method=="prcomp"){
prin_comp <- prcomp(exprMatrix, scale. = T, center = T, rank. = pcNum)
pcMatrix <- prin_comp$x
#if (pcNum < dim(prin_comp$x)[2]) {
#  pcMatrix <- prin_comp$x[,1:pcNum]
#} else if (pcNum > dim(prin_comp$x)[2]) {
#  print("ERROR: please choose a smaller pcNum!!!")
#} else { pcMatrix <- prin_comp$x }
} else if (method=="pcaMethods"){
library(pcaMethods)
prin_comp <- pca(exprMatrix, scale = "uv", center = T, nPcs = pcNum, method = "svd")
pcMatrix <- prin_comp@scores[,1:pcNum]
}
end_time <- Sys.time()
print("matrix size: ")
print(dim(M))
print(paste("pcNum: ", pcNum, ",method: ", method))
print(end_time - start_time)
outliers <- mvoutlier::pcout(pcMatrix, makeplot = FALSE,
explvar = 0.5, crit.M1 = 0.9,
crit.c1 = 5, crit.M2 = 0.9,
crit.c2 = 0.99, cs = 0.25,
outbound = 0.05)
!as.logical(outliers$wfinal01)
table(!as.logical(outliers$wfinal01))
as.character(!as.logical(outliers$wfinal01))
as.integer(!as.logical(outliers$wfinal01))
pca$mvoutlier <- as.character(as.integer(!as.logical(outliers$wfinal01)))
print(ggplot(pca, aes(x=PC1, y=PC2, color=mvoutlier)) +
geom_point(size=2.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
scale_color_manual(values=c("#B2DF8A","#1F78B4")) )
pca$mvoutlier <- "NO"
pca[!as.logical(outliers$wfinal01,]$mvoutlier <- "YES"
pca
!as.logical(outliers$wfinal01
pca[!as.logical(outliers$wfinal01),]$mvoutlier <- "YES"
pca[!as.logical(outliers$wfinal01),]$mvoutlier <- "YES"
pca$mvoutlier
table(pca$mvoutlier)
print(ggplot(pca, aes(x=PC1, y=PC2, color=mvoutlier)) +
geom_point(size=2.5, alpha=1) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank()) +
scale_color_manual(values=c("#B2DF8A","#1F78B4")) )
plot(disOrder)
save(expr2, file = "expr2.Rdata")
expr2
dim(expr2)
