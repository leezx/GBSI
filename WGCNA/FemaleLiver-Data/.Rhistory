tmp_omega <- sample(seq(0,1,by=0.1), 1)
expr_matrix[i,] <- rzinb(totalCell, tmp_k, tmp_lambda, tmp_omega)
# hist(rzinb(1000, 10, 50, 0.5))
}
rownames(expr_matrix) <- 1:totalGene
colnames(expr_matrix) <- 1:totalCell
expr_matrix[expr_matrix>10] <- 10
expr_matrix[expr_matrix<0] <- 0
options(stringsAsFactors = F)
expr_matrix <- as.data.frame(expr_matrix)
annotation_col <- data.frame(cluster=colnames(expr_matrix), row.names = colnames(expr_matrix))
annotation_col[(ncell*0+1):(ncell*1),] <- "Subtype1"
annotation_col[(ncell*1+1):(ncell*2),] <- "Subtype2"
annotation_col[(ncell*2+1):(ncell*3),] <- "Subtype3"
annotation_col[(ncell*3+1):(ncell*4),] <- "Subtype4"
annotation_row <- data.frame(markerType=rownames(expr_matrix), row.names = rownames(expr_matrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
library(RColorBrewer)
annotation_colors1 <- brewer.pal(4,"Set1")
names(annotation_colors1) <- c("Subtype1", "Subtype2", "Subtype3", "Subtype4")
annotation_colors2 <- brewer.pal(10,"Set3")
names(annotation_colors2) <- c("MT1", "MT1-neg", "MT1'", "MT1''", "MT2-intermediate", "MT3", "MT4", "MT4'", "Noise1", "Noise2")
if (show_matrix){
library(pheatmap)
pheatmap(expr_matrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_col, annotation_row = annotation_row, annotation_colors=list(cluster=annotation_colors1 , markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
}
expr_matrix2 <- expr_matrix
geneCount <- dim(expr_matrix)[1]
cellCount <- dim(expr_matrix)[2]
for (i in 1:geneCount) {
randomCells <- sample(1:cellCount, as.integer(0.1*cellCount))
expr_matrix[i,randomCells] <- 0
}
pheatmap(expr_matrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_col, annotation_row = annotation_row, annotation_colors=list(cluster=annotation_colors1 , markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
method="pearson"
corMatrix <- cor(x = as.matrix(t(expr_matrix)), method = method)
corMatrix
dim(corMatrix)
dim(expr_matrix)
pheatmap(corMatrix)
corMatrix[is.na(corMatrix)] <- 0
pheatmap(corMatrix)
pheatmap(corMatrix, cluster_cols = F, cluster_rows = F)
method="spearman"
corMatrix <- cor(x = as.matrix(t(expr_matrix)), method = method)
corMatrix[is.na(corMatrix)] <- 0
pheatmap(corMatrix, cluster_cols = F, cluster_rows = F)
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
annotation_row
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
method="pearson"
corMatrix <- cor(x = as.matrix(t(expr_matrix)), method = method)
corMatrix[is.na(corMatrix)] <- 0
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
corMatrix <- cor(x = as.matrix(t(expr_matrix2)), method = method)
corMatrix[is.na(corMatrix)] <- 0
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
?pheatmap
corMatrix <- cor(x = as.matrix(t(expr_matrix2)), method = method)
corMatrix[is.na(corMatrix)] <- 0
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F)
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color = colorRampPalette(c("dark blue", "blue", "white", "orange", "red")))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color = colorRampPalette(c("dark blue", "blue", "white", "orange", "red"))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color = colorRampPalette(c(""blue", "white","red"))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color = colorRampPalette(c("blue", "white","red"))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, colorRampPalette(rev(brewer.pal(n = 7, name ="RdYlBu")))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color=colorRampPalette(rev(brewer.pal(n = 7, name ="RdYlBu")))(100))
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color=colorRampPalette(rev(brewer.pal(n = 7, name ="RdBu")))(100))
corMatrix <- cor(x = as.matrix(t(expr_matrix)), method = method)
corMatrix[is.na(corMatrix)] <- 0
annotation_row <- data.frame(markerType=rownames(corMatrix), row.names = rownames(corMatrix))
annotation_row[(ngene*0+1):(ngene*1),] <- "MT1"
annotation_row[(ngene*1+1):(ngene*2),] <- "MT1-neg"
annotation_row[(ngene*2+1):(ngene*3),] <- "MT1'"
annotation_row[(ngene*3+1):(ngene*4),] <- "MT1''"
annotation_row[(ngene*4+1):(ngene*5),] <- "MT1"
annotation_row[(ngene*5+1):(ngene*6),] <- "MT2-intermediate"
annotation_row[(ngene*6+1):(ngene*7),] <- "MT3"
annotation_row[(ngene*7+1):(ngene*8),] <- "MT4"
annotation_row[(ngene*8+1):(ngene*9),] <- "MT4'"
annotation_row[(ngene*9+1):(ngene*10),] <- "Noise1"
annotation_row[(ngene*10+1):(ngene*11),] <- "Noise2"
pheatmap(corMatrix, cluster_rows = F, cluster_cols = F, show_rownames = F, show_colnames = F, annotation_col = annotation_row, annotation_row = annotation_row, annotation_colors=list(markerType=annotation_colors2), annotation_names_row=F, annotation_names_col = F, color=colorRampPalette(rev(brewer.pal(n = 7, name ="RdBu")))(100))
load("/Users/surgery/Downloads/Supplementary_Software/R/data/Test_3_Pollen.RData")
dim(Test_3_Pollen$in_X)
deng <- readRDS("/Users/surgery/Project/HOME/github/scRNA.seq.course/deng/deng-reads.rds")
dim(deng)
springCoord <- read.csv("/Users/surgery/Project/HOME/github/SPRING/datasets/SAG_python/coordinates.txt", header = F, row.names = 1)
plot(springCoord$V2, springCoord$V3)
plot(springCoord$V2, -springCoord$V3)
colanno <- read.csv("/Users/surgery/Project/HOME/1-projects/1.scRNA-seq/1-batch/1-formal/SAG/Output/all_SAG_colanno.csv", header = T)
colanno
colanno <- read.csv("/Users/surgery/Project/HOME/1-projects/1.scRNA-seq/1-batch/1-formal/SAG/Output/all_SAG_colanno.csv", header = T, row.names = 1)
colanno
springCoord <- read.csv("/Users/surgery/Project/HOME/github/SPRING/datasets/SAG_python/coordinates.txt", header = F, row.names = 1)
colanno <- read.csv("/Users/surgery/Project/HOME/1-projects/1.scRNA-seq/1-batch/1-formal/SAG/Output/all_SAG_colanno.csv", header = T, row.names = 1)
plot(springCoord$V2, -springCoord$V3)
options(stringsAsFactors = F)
options(mc.cores = 3)
library(SingleCellExperiment)
library(SC3)
library(scater)
library(pheatmap)
library(RColorBrewer)
set.seed(1234567)
library(RColorBrewer)
source("/Users/surgery/Project/HOME/myScript/zxli_lib.R") # my R lib
setwd("/Users/surgery/Project/HOME/github/scripts/SAG") # for scipt save
setwd("/Users/surgery/Project/HOME/1-projects/1.scRNA-seq/1-batch/1-formal/SAG")
load("markerList.Rdata")
markerList
markerdf <- data.frame()
for (i in names(markerList)) {
for (j in 1:length(markerList[[i]])) {
markerdf <- rbind(markerdf, marker=markerList[[i]][j], cluster=i)
}
}
markerdf
markerdf <- data.frame()
markerdf
rbind(markerdf, data.frame(marker=markerList[[i]][j], cluster=i))
markerdf <- data.frame()
for (i in names(markerList)) {
for (j in 1:length(markerList[[i]])) {
markerdf <- rbind(markerdf, data.frame(marker=markerList[[i]][j], cluster=i))
}
}
markerdf
write.csv(markerdf, file = "markerdf.csv")
118+50+108+149
setwd("/Users/surgery/Project/HOME/github/MBSIT/WGCNA/FemaleLiver-Data")
library(WGCNA);
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
#Read in the female liver data set
femData = read.csv("LiverFemale3600.csv");
femData
dim(femData)
femData[1:5,1:5]
dim(femData);
names(femData);
datExpr0 = as.data.frame(t(femData[, -c(1:8)]));
datExpr0
datExpr0[1:5,1:5]
names(datExpr0) = femData$substanceBXH;
rownames(datExpr0) = names(femData)[-c(1:8)];
gsg = goodSamplesGenes(datExpr0, verbose = 3);
?goodSamplesGenes
gsg[1:5,1:5]
gsg
gsg$allOK
if (!gsg$allOK)
{
# Optionally, print the gene and sample names that were removed:
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}
sampleTree = hclust(dist(datExpr0), method = "average");
sampleTree
sizeGrWindow(12,9)
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
abline(h = 15, col = "red");
?cutreeStatic
clust = cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
table(clust)
keepSamples = (clust==1)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
traitData = read.csv("ClinicalTraits.csv");
dim(traitData)
names(traitData)
traitData[1:5,1:5]
allTraits = traitData[, -c(31, 16)];
allTraits = allTraits[, c(2, 11:36) ];
dim(allTraits)
names(allTraits)
femaleSamples
datExpr
datExpr[1:5,1:5]
femaleSamples = rownames(datExpr);
traitRows = match(femaleSamples, allTraits$Mice);
datTraits = allTraits[traitRows, -1];
rownames(datTraits) = allTraits[traitRows, 1];
collectGarbage();
?collectGarbage
sampleTree2 = hclust(dist(datExpr), method = "average")
traitColors = numbers2colors(datTraits, signed = FALSE);
traitColors
plotDendroAndColors(sampleTree2, traitColors,
groupLabels = names(datTraits),
main = "Sample dendrogram and trait heatmap")
save(datExpr, datTraits, file = "FemaleLiver-01-dataInput.RData")
options(stringsAsFactors = FALSE);
# Allow multi-threading within WGCNA. This helps speed up certain calculations.
# At present this call is necessary for the code to work.
# Any error here may be ignored but you may want to update WGCNA if you see one.
# Caution: skip this line if you run RStudio or other third-party R environments.
# See note above.
enableWGCNAThreads()
# Load the data saved in the first part
lnames = load(file = "FemaleLiver-01-dataInput.RData");
#The variable lnames contains the names of loaded variables.
lnames
powers = c(c(1:10), seq(from = 12, to=20, by=2))
powers
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
powers
datExpr[1:5,1:5]
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
?pickSoftThreshold
allowWGCNAThreads()
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
sft
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
net = blockwiseModules(datExpr, power = 6,
TOMType = "unsigned", minModuleSize = 30,
reassignThreshold = 0, mergeCutHeight = 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = TRUE,
saveTOMFileBase = "femaleMouseTOM",
verbose = 3)
?blockwiseModules
net
sizeGrWindow(12, 9)
# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
"Module colors",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs;
geneTree = net$dendrograms[[1]];
save(MEs, moduleLabels, moduleColors, geneTree,
file = "FemaleLiver-02-networkConstruction-auto.RData")
softPower = 6;
adjacency = adjacency(datExpr, power = softPower);
adjacency[1:5,1:5]
2.997850e-09
TOM = TOMsimilarity(adjacency);
dissTOM = 1-TOM
TOM
geneTree = hclust(as.dist(dissTOM), method = "average");
# Plot the resulting clustering tree (dendrogram)
sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04);
minModuleSize = 30;
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
table(dynamicMods)
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
# Plot the dendrogram and colors underneath
sizeGrWindow(8,6)
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
MEDissThres = 0.25
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;
#=====================================================================================
#
#  Code chunk 10
#
#=====================================================================================
sizeGrWindow(12, 9)
#pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
#dev.off()
options(stringsAsFactors = FALSE);
# Load the expression and trait data saved in the first part
lnames = load(file = "FemaleLiver-01-dataInput.RData");
#The variable lnames contains the names of loaded variables.
lnames
# Load network data saved in the second part.
lnames = load(file = "FemaleLiver-02-networkConstruction-auto.RData");
lnames
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
moduleTraitPvalue
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix =  paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = greenWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
weight = as.data.frame(datTraits$weight_g);
names(weight) = "weight"
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datExpr, weight, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(weight), sep="");
names(GSPvalue) = paste("p.GS.", names(weight), sep="");
module = "brown"
column = match(module, modNames);
moduleGenes = moduleColors==module;
sizeGrWindow(7, 7);
par(mfrow = c(1,1));
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for body weight",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
annot = read.csv(file = "GeneAnnotation.csv");
dim(annot)
names(annot)
probes = names(datExpr)
probes2annot = match(probes, annot$substanceBXH)
# The following is the number or probes without annotation:
sum(is.na(probes2annot))
geneInfo0 = data.frame(substanceBXH = probes,
geneSymbol = annot$gene_symbol[probes2annot],
LocusLinkID = annot$LocusLinkID[probes2annot],
moduleColor = moduleColors,
geneTraitSignificance,
GSPvalue)
# Order modules by their significance for weight
modOrder = order(-abs(cor(MEs, weight, use = "p")));
# Add module membership information in the chosen order
for (mod in 1:ncol(geneModuleMembership))
{
oldNames = names(geneInfo0)
geneInfo0 = data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]],
MMPvalue[, modOrder[mod]]);
names(geneInfo0) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
# Order the genes in the geneInfo variable first by module color, then by geneTraitSignificance
geneOrder = order(geneInfo0$moduleColor, -abs(geneInfo0$GS.weight));
geneInfo = geneInfo0[geneOrder, ]
write.csv(geneInfo, file = "geneInfo.csv")
geneInfo
geneInfo[1:5,1:5]
lnames = load(file = "FemaleLiver-01-dataInput.RData");
#The variable lnames contains the names of loaded variables.
lnames
# Load network data saved in the second part.
lnames = load(file = "FemaleLiver-02-networkConstruction-auto.RData");
lnames
annot = read.csv(file = "GeneAnnotation.csv");
# Match probes in the data set to the probe IDs in the annotation file
probes = names(datExpr)
probes2annot = match(probes, annot$substanceBXH)
# Get the corresponding Locuis Link IDs
allLLIDs = annot$LocusLinkID[probes2annot];
# $ Choose interesting modules
intModules = c("brown", "red", "salmon")
for (module in intModules)
{
# Select module probes
modGenes = (moduleColors==module)
# Get their entrez ID codes
modLLIDs = allLLIDs[modGenes];
# Write them into a file
fileName = paste("LocusLinkIDs-", module, ".txt", sep="");
write.table(as.data.frame(modLLIDs), file = fileName,
row.names = FALSE, col.names = FALSE)
}
# As background in the enrichment analysis, we will use all probes in the analysis.
fileName = paste("LocusLinkIDs-all.txt", sep="");
write.table(as.data.frame(allLLIDs), file = fileName,
row.names = FALSE, col.names = FALSE)
GOenr = GOenrichmentAnalysis(moduleColors, allLLIDs, organism = "mouse", nBestP = 10);
GOenr
source("https://bioconductor.org/biocLite.R")
biocLite("org.Mm.eg.db")
GOenr = GOenrichmentAnalysis(moduleColors, allLLIDs, organism = "mouse", nBestP = 10);
options(stringsAsFactors = FALSE);
# Load the expression and trait data saved in the first part
lnames = load(file = "FemaleLiver-01-dataInput.RData");
#The variable lnames contains the names of loaded variables.
lnames
# Load network data saved in the second part.
lnames = load(file = "FemaleLiver-02-networkConstruction-auto.RData");
lnames
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
dissTOM = 1-TOMsimilarityFromExpr(datExpr, power = 6);
# Transform dissTOM with a power to make moderately strong connections more visible in the heatmap
plotTOM = dissTOM^7;
# Set diagonal to NA for a nicer plot
diag(plotTOM) = NA;
# Call the plot function
sizeGrWindow(9,9)
TOMplot(plotTOM, geneTree, moduleColors, main = "Network heatmap plot, all genes")
